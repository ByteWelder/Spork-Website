{"pages":[{"title":"Spork 4.0 Documentation","text":"Getting started on Android WARNING: Spork 4.0 is only accessible as a snapshot release.This is not a final release and is subject to potential changes in its API. Add the following dependencies in build.gradle: repositories { maven { url &quot;http:\/\/dl.bintray.com\/bytewelder\/maven-snapshot&quot; } } dependencies { \/\/ Spork Dependency Injection compile 'com.bytewelder.spork:spork-inject:4.0.0' \/\/ Spork for Android (pick one of the dependencies below) compile 'com.bytewelder.spork:spork-android:4.0.0@aar' compile 'com.bytewelder.spork:spork-android-support:4.0.0@aar' } Getting started on Java Add the following dependencies in build.gradle: dependencies { compile 'com.bytewelder.spork:spork-inject:4.0.0' } All dependencies are available at Maven Central Repository. Migrating from 3.x to 4.0: repository is moved to jCenter with snapshots at http:\/\/dl.bintray.com\/bytewelder\/maven-snapshot base packages renamed from io.github.sporklibrary to spork @BindComponent is now @Inject and injection is done with dependencies defined by an ObjectGraph and its modules. @ComponentScope(Scope.SINGLETON) is now @Singleton removed custom support for RecyclerView.ViewHolder as you can now make it implement ViewProvider FieldBinder, MethodBinder and TypeBinder interfaces are changed","tags":"","url":"index.html"},{"title":"Android","text":"Introduction Spork for Android allows you to write less Android boilerplate code so you can focus on the more importants parts when writing applications. Spork for Android dependencies come in 2 flavors: spork-android which provides all basic Android injection spork-android-support which provides injection for android.support.v4.app.Fragment Dependencies Regular repositories { jcenter() } dependencies { compile 'com.bytewelder.spork:spork-android:4.0.0@aar' } For Applications with AppCompat\/Support libraries: repositories { jcenter() } dependencies { compile 'com.bytewelder.spork:spork-android-support:4.0.0@aar' { exclude group: 'com.android.support' } } Example @BindLayout(R.layout.activity_download) public class YourActivity extends Activity { @BindView(R.id.your_button) private Button button; @BindFragment(R.id.your_fragment) private DetailsFragment fragment; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Spork.bind(this); } @BindClick(R.id.other_button) private void onClickButton(Button button) { \/\/ handle click } }","tags":"","url":"Android\/index.html"},{"title":"BindClick","text":"@BindClick This annotation can be used with classes inheriting\/implementing: android.app.Activity android.app.Fragment android.support.v4.app.Fragment (with the spork-android-support dependency) android.view.View spork.android.ViewProvider You can specify the view id as the annotation value: @BindClick(R.id.download_button) private void onClickDownload() { } Alternatively, you can imply the view id by the method name: @BindClick private void download_button() { } You can also pass the any compatible View instance as method argument: @BindClick(R.id.download_button) private void onClickDownload(Button button) { }","tags":"","url":"Android\/Annotations\/BindClick.html"},{"title":"BindFragment","text":"@BindFragment This annotation can be used with classes derived from: android.app.Activity android.app.Fragment android.support.v4.app.Fragment (with the spork-android-support dependency) You can bind a fragment by specifying its id: @BindFragment(R.id.my_fragment) private Fragment myFragment; Alternatively, you can imply the fragment id by the field name: @BindFragment private Fragment my_fragment;","tags":"","url":"Android\/Annotations\/BindFragment.html"},{"title":"BindLayout","text":"@BindLayout This annotation can be used with classes inheriting: android.app.Activity android.view.ViewGroup When using it for ViewGroup, a FrameLayout is preferred as the inflated layout will be added as a child to it. Example: Activity @BindLayout(R.layout.activity_custom) public class CustomActivity extends Activity { @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Spork.bind(this); } } Example: ViewGroup @BindLayout(R.layout.view_custom) public class CustomView extends FrameLayout { public MyView(Context context) { super(context); Spork.bind(this); } }","tags":"","url":"Android\/Annotations\/BindLayout.html"},{"title":"BindResource","text":"@BindResoure This annotation can be used with classes inheriting\/implementing: android.app.Activity android.app.Application android.app.Fragment android.app.Service android.content.ContentProvider android.support.v4.app.Fragment (with the spork-android-support dependency) android.view.View spork.android.ContextProvider spork.android.ViewProvider It can bind: R.dimen.* to Float or float fields R.string.* to String fields R.integer.* to Integer and int fields R.bool.* to Boolean and boolean fields R.drawable.* to Drawable fields You can bind a resource by specifying its id: @BindResource(R.string.app_name) private String appName; Alternatively, you can imply the view id by the field name: @BindResource private String app_name; Example public class MyActivity extends Activity { @BindResource(R.string.app_name) private String appName; @BindResource private String app_name; @BindResource(R.dimen.spork_test_dimension) private float sporkTestDimension; @BindResource private Float spork_test_dimension; @BindResource(R.drawable.spork_test_drawable) private Drawable sporkTestDrawable; @BindResource private Drawable spork_test_drawable; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Spork.bind(this); } }","tags":"","url":"Android\/Annotations\/BindResource.html"},{"title":"BindView","text":"@BindView This annotation can be used with classes inheriting\/implementing: android.app.Activity android.app.Fragment android.support.v4.app.Fragment (with the spork-android-support dependency) android.view.View spork.android.ViewProvider You can bind a view by specifying its id: @BindView(R.id.my_button) private Button button; Alternatively, you can imply the view id by the field name: @BindView private Button my_button;","tags":"","url":"Android\/Annotations\/BindView.html"},{"title":"Activity","text":"Activity Introduction The following annotations are supported: @BindClick @BindView @BindLayout @BindResource @BindFragment Example @BindLayout(R.layout.activity_download) public class DownloadActivity extends Activity { @BindView(R.id.download_button) private Button downloadButton; @BindFragment(R.id.details_fragment) private DetailsFragment fragment; public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Spork.bind(this); } @BindClick(R.id.other_button) private void onClickButton(Button someButton) { downloadManager.startDownload(); } }","tags":"","url":"Android\/Examples\/Activity.html"},{"title":"Application","text":"Application Introduction The following annotations are supported: @BindResource Example public class MyApplication extends android.app.Application { @BindResource(R.string.app_name) private String appName; @Override public void onCreate() { super.onCreate(); Spork.bind(this); } }","tags":"","url":"Android\/Examples\/Application.html"},{"title":"ContentProvider","text":"ContentProvider Introduction The following annotations are supported: @BindResource Example public class CustomContentProvider extends ContentProvider { @BindResource(R.string.helloworld) private String helloWorld; @Override public boolean onCreate() { Spork.bind(this); return true; } \/\/ ContentProvider methods }","tags":"","url":"Android\/Examples\/ContentProvider.html"},{"title":"Fragment","text":"Fragment Introduction You can also use android.support.v4.app.Fragment if you add the spork-android-support dependency. The following annotations are supported: @BindClick @BindView @BindResource @BindFragment @Inject Example public class MyFragment extends Fragment { @BindView(R.id.some_textview) private TextView myTextView; @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_click_binding, container); } @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { Spork.bind(this); } @BindClick(R.id.some_button) private void onClick() { \/\/ click-handling code goes here } }","tags":"","url":"Android\/Examples\/Fragment.html"},{"title":"RecyclerView","text":"RecyclerView Introduction To bind RecyclerView views, you need to make RecyclerView.ViewHolder implement spork.android.ViewProvider. The following annotations are supported: @BindView @BindClick @BindResource Example public class MyAdapter extends RecyclerView.Adapter&lt;MyAdapter.MyViewHolder&gt; { private final List&lt;String&gt; items; public MyAdapter(List&lt;String&gt; items) { this.items = items; } public class MyViewHolder extends RecyclerView.ViewHolder implements ViewProvider { @BindView(R.id.textview) private TextView textView; public MyViewHolder(View itemView) { super(itemView); Spork.bind(this); } public void update(String text) { textView.setText(text); } @BindClick(R.id.textview) private void onClick() { \/\/ ... } @Override public View getView() { return itemView; } } @Override public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { LayoutInflater inflater = LayoutInflater.from(parent.getContext()); View view = inflater.inflate(R.layout.view_recyclerview_item, parent, false); return new MyViewHolder(view); } @Override public void onBindViewHolder(MyViewHolder holder, int position) { String item = items.get(position); holder.update(item); } @Override public int getItemCount() { return items.size(); } }","tags":"","url":"Android\/Examples\/RecyclerView.html"},{"title":"Service","text":"Service Introduction The following annotations are supported: @BindResource Example public class TestService extends Service { @BindResource(R.string.helloworld) private String helloWorld; public class LocalBinder extends Binder { public TestService getLocalService() { return TestService.this; } } @Override public void onCreate() { super.onCreate(); Spork.bind(this); } @Override public @Nullable IBinder onBind(Intent intent) { return new LocalBinder(); } }","tags":"","url":"Android\/Examples\/Service.html"},{"title":"View","text":"View Introduction When creating a custom view, it's best to extend a FrameLayout, because @BindLayout will inflate the specified layout into it. The following annotations are supported: @BindClick @BindView @BindLayout @BindResource Example @BindLayout(R.layout.view_layout_binding) public class MyView extends FrameLayout { (R.id.textview) private TextView textView; public MyView(Context context) { super(context); \/\/ Note: Spork.bind() must be called in \/\/ all constructors that are implemented! Spork.bind(this); } @BindClick(R.id.button_one) private void onClickDownload() { \/\/ ... } \/\/ BindClick can also pass the button that was clicked @BindClick(R.id.button_two) private void onClickOtherButton(Button otherButton) { \/\/ ... } }","tags":"","url":"Android\/Examples\/View.html"},{"title":"ProGuard","text":"ProGuard &amp; DexGuard When using spork-android or spork-android-support, your ProGuard configurations are provided by the library. When using spork-inject, you should manually configure ProGuard\/DexGuard for the injectable classes. For example: -keep class com.yourapp.modules.** { *; } -keep interface com.yourapp.interfaces.** { *; }","tags":"","url":"Android\/ProGuard.html"},{"title":"Dependency Injection","text":"Introduction Spork Inject is a fast runtime dependency injection framework for Java and Android. It is almost fully compatible with Dagger and is modeled on the JSR-330 specification. Some advantages of Spork Inject: Write less boilerplate code Manage your dependencies more easily Improve testability: swap or override dependencies for tests No code generation, which makes the code easier to review Decrease coupling between a class and its dependencies Forces you to think about your class dependencies, which can lead to better application design Dependencies Add the following dependencies in build.gradle: repositories { jcenter() } dependencies { compile 'com.bytewelder.spork:spork-inject:4.0.0' } Example public class BrewModule { @Provides public Mug provideMug() { return new MugWithPrint(&quot;Input Java, output Java.&quot;); } @Provides public Water provideWater() { return new BoilingWater(); } @Provides public Beans provideBeans() { return new ArabicaBeans(); } @Provides public Coffee provideCoffee(Water water, CoffeeBeans beans) { return new BlackCoffee(water, beans); } } class CoffeeMug { @Inject private Coffee coffee; @Inject private Mug mug; public CoffeeMug() { ObjectGraphs.builder() .module(new BrewModule()) .build() .inject(this); \/\/ same as Spork.inject(this, objectGraph) } }","tags":"","url":"Dependency_Injection\/index.html"},{"title":"User Guide","text":"Using Spork Inject Spork creates instances of your classes and satisfies their dependencies. It uses the javax.inject.Inject annotation to identify which constructors and fields it is interested in. Use the ObjectGraph.bind() method in a constructor or initialization method to wire up all dependencies. When a new instance is requested, Spork will obtain the required parameters values and invoke its constructor. When bind() is called on an ObjectGraph, any other registered Spork binding (e.g. @BindView) is also resolved. class CoffeeMug { private Coffee coffee; private Mug mug; CoffeeMug(Coffee coffee, Mug mug) { this.coffee = coffee; this.mug = mug; } } Spork can inject fields directly. In this example it obtains an Coffee and a Mug instance for the respective fields: class CoffeeMug { @Inject private Coffee coffee; @Inject private Mug mug; ... } Spork also supports method injection, but Field injection is generally preferred. Declaring Dependencies In the above sample, an Coffee and Mug are injected. Of course these dependencies must come from somewhere. Dependencies should be defined in a Module as follows: @Provides public Coffee provideCoffee() { return new BlackCoffee(); } It's possible for a @Provides method to require dependencies on its own: @Provides public Coffee provideCoffee(Water water, CoffeeBeans beans) { return new BlackCoffee(water, beans); } @Provides public Mug provideMug() { return new MugWithPrint(&quot;Input Java, output Java.&quot;); } Modules The @Provides-annotated methods above are placed in a Module. Modules are POJO objects that define a set of dependencies: public class BrewModule { @Provides public Mug provideMug() { return new MugWithPrint(&quot;Input Java, output Java.&quot;); } @Provides public Water provideWater() { return new BoilingWater(); } @Provides public Beans provideBeans() { return new ArabicaBeans(); } @Provides public Coffee provideCoffee(Water water, CoffeeBeans beans) { return new BlackCoffee(water, beans); } } Building an ObjectGraph A module is used to build an object graph. Object graphs hold state such as your singletons and named instances. Creating an ObjectGraph is easy: ObjectGraph objectGraph = ObjectGraphs.builder() .module(new BrewModule()) .build(); When putting it all together, the CoffeeMug from the sample above could be injected as follows: class CoffeeMug { @Inject private Coffee coffee; @Inject private Mug mug; public CoffeeMug() { ObjectGraphs.builder() .module(new BrewModule()) .build() .inject(this); \/\/ same as Spork.inject(this, objectGraph) } } ObjectGraph with parent An object graph can have a parent object graph: ObjectGraph objectGraph = ObjectGraphs.builder(applicationObjectGraph) .module(new BrewModule()) .build(); This way, it can resolve dependencies from its parent and from the BrewModule. An ObjectGraph's modules can override the dependencies of the parent as long as the injection signature is an exact match: its type, qualifier and nullability must match. Scoped injection A scoped instance is an instance that belongs to an ObjectGraph created at a specific level of the application. It is tied to the lifecycle of that ObjectGraph. Singleton is a predefined scope that is always available at the root ObjectGraph in your application. It is tied to the lifecycle of that ObjectGraph. @Provides methods in a module can specify a scope. It can be used like this: @Provides @Singleton CoffeeService provideCoffeeService() { return new CoffeeServiceImpl(); } You can also create custom scopes, which can look like this: @Provides @LocationScope(AMSTERDAM) CoffeeService provideCoffeeService() { return new CoffeeServiceImpl(); } In this case, the Service is bound to the lifecycle of the ObjectGraph that defines the LocationScope. Lazy injection Instead of injecting an instance directly, they can also injected on a Lazy&lt;T&gt; field. When get() is called on the Lazy field, it will retrieve the injected instance from the module. Calling get() multiple times will return the same instances every time. class Programmer { @Inject private Lazy&lt;CoffeeMug&gt; coffeeMug; public Programmer() { ... drink(coffeeMug.get()); } } Provider injection A Provider&lt;T&gt; is similar to a Lazy&lt;T&gt; field, but injects a new instance every time it is called. Injecting Provider&lt;T&gt; is generally not advised. You might want to use the factory pattern instead or re-organize your logic and use a Lazy&lt;T&gt; field instead. class Programmer { @Inject private Provider&lt;CoffeeMug&gt; coffeeMug; public Programmer() { ... drink(coffeeMug.get()); } } Qualifiers Sometimes it is not sufficient to bind by type alone. In such cases, you might want to identify an injection by some kind of identifier. In such cases, you can define a new annotation and add to it a @Qualifier annotation. Named The @Named annotation is one that is available by default: @Qualifier @Documented @Retention(RUNTIME) public @interface Named { String value(); } A module is then available to provide named injections: class WaterModule { @Provides @Named(&quot;cold&quot;) public Water provideColdWater() { ... } @Provides @Named(&quot;hot&quot;) public Water provideHotWater() { ... } } This module can then be used to inject a Faucet class: class Faucet { @Inject @Named(&quot;cold&quot;) Water coldWater; @Inject @Named(&quot;hot&quot;) Water hotWater; ... } Custom qualifiers You can also define your own qualifiers. For example: @Qualifier @Documented @Retention(RUNTIME) public @interface Colored { } Using a value() method is also supported: @Qualifier @Documented @Retention(RUNTIME) public @interface Colored { Color value() default Color.WHITE; } The output of value() is used to create a unique identifier. This is done internally by calling toString() on Color. Adding spork to your project repositories { jcenter() } dependencies { compile 'com.bytewelder.spork:spork-inject:4.0.0' } Note: Before release, spork-inject is available at maven repository http:\/\/dl.bintray.com\/bytewelder\/maven-snapshot License Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http:\/\/www.apache.org\/licenses\/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","tags":"","url":"Dependency_Injection\/User_Guide.html"},{"title":"ObjectGraphs","text":"objectGraphFrom() Linking ObjectGraph instances can seem tricky at first. Let's assume these Android objects: public class YourApplication extends Application { ... } public class YourActivity extends Activity { ... } Firstly you want to enrich YourAppication class with an ObjectGraph: public class YourApplication extends Application { private ObjectGraph objectGraph; @Override public void onCreate() { super.onCreate(); objectGraph = ObjectGraphs.builder() .module(new ExampleApplicationModule()) .build(); } \/\/ Expose it to Activities, Fragments, etc. public ObjectGraph getObjectGraph() { return objectGraph; } } The next step is to also inject YourActivity. Many people would (wrongly) chose to do this: public class YourActivity extends Activity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { ((YourApplication) getApplication).getObjectGraph().inject(this); } } It is better to make YourAppication implement ObjectGraphProvider as follows: public class YourApplication extends Application implements ObjectGraphProvider { private ObjectGraph objectGraph; @Override public void onCreate() { super.onCreate(); objectGraph = ObjectGraphs.builder() .module(new ExampleApplicationModule()) .build(); } @Override &lt;-- is now part of the ObjectGraphProvider interface public ObjectGraph getObjectGraph() { return objectGraph; } } With a handy utility from spork-inject, you can now easily access the ObjectGraph from YourActivity: public class YourActivity extends Activity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { objectGraphFrom(getApplication()).inject(this); } } objectGraphFrom() does a type check to see if YourApplication implements the right interface. If not, it will throw a RuntimeException.","tags":"","url":"Dependency_Injection\/ObjectGraphs.html"},{"title":"Custom Scopes","text":"Scopes can be custom-made. Firstly you need to define the annotation for your scope: @Scope @Retention(RetentionPolicy.RUNTIME) private @interface SessionScope { } The root ObjectGraph will always automatically define the Singleton scope, as the root ObjectGraph will contain all singleton instances. Let's consider these classes: Application: Main application instance, injected by ApplicationModule Session: A session started in the application, injected by SessionModule Screen: A view controller that exists in the Session's scope, injected by ScreenModule For this we need to define some modules: class ApplicationModule { ... } class SessionModule { static final AtomicInteger counter = new AtomicInteger(); @Provides @SessionScope public Integer provideSessionId() { return counter.incrementAndGet(); } } class ScreenModule { ... } These are some classes that could be injected by the above modules: private static class Application { final ObjectGraph appGraph; ... public Application() { appGraph = ObjectGraphs.builder() .module(new ApplicationModule()) .build(); appGraph.inject(this); } } private static class Session { final ObjectGraph sessionGraph; @Inject Integer sessionId; \/\/ create an ObjectGraph based on AppGraph, using SessionScope as scope public Session(ObjectGraph appGraph) { ObjectGraph sessionGraph = ObjectGraphs.builder() .scope(SessionScope.class) .module(new SessionModule()) .build(); sessionGraph.inject(this); } } private static class Screen { final ObjectGraph screenGraph; @Inject Integer sessionId; public Screen(ObjectGraph sessionGraph) { screenGraph = ObjectGraphs.builder() .module(new ScreenModule()) .build(); screenGraph.inject(this) } public Integer getSessionId() { return sessionId; } } The Screen is now bound to a Session. Any newly created Screen that is started with the same ObjectGraph from the created Session will share its SessionScope instances.","tags":"","url":"Dependency_Injection\/Custom_Scopes.html"},{"title":"Migrating from Dagger","text":"Migrating from Dagger These are the main differences between Dagger and Spork: Components are replaced by ObjectGraph and also depends on module classes Provides and Lazy classes are in the spork.inject package No need to annotate your module classes with @Module Spork is able to inject private fields and methods Dagger annotations that Spork doesn't support (yet): @Reusable @ForReleasableReferences @BindsOptionalOf","tags":"","url":"Dependency_Injection\/Migrating_from_Dagger.html"},{"title":"Annotation Development","text":"Spork Core Spork Core contains the basic building blocks where the other Spork libraries are built upon. It is provides annotation processing interfaces for classes(&quot;types&quot;), fields and methods. Dependencies Add the following dependencies in build.gradle: repositories { jcenter() } dependencies { compile 'com.bytewelder.spork:spork:4.0.0' }","tags":"","url":"Annotation_Development\/index.html"},{"title":"Creating Annotations","text":"Creating Annotations Overview Spork annotations are bound through one or more of: MethodBinder FieldBinder TypeBinder These binders are registered with Spork.register() FieldBinder FieldBinders are used for annotations that target ElementType.FIELD. Example public class BindViewBinder implements FieldBinder&lt;BindView&gt; { @Override public void bind(Object object, BindView annotation, Field field, Object... parameters) { if (!View.class.isAssignableFrom(field.getType())) { throw new BindFailed(...); } View view = Views.getView(viewResolver, annotation.value(), field.getName(), object); Reflection.setFieldValue(annotation, field, object, view); } @Override public Class&lt;BindView&gt; getAnnotationClass() { return BindView.class; } } MethodBinder MethodBinders are used for annotations that target ElementType.METHOD. Example public class BindClickBinder implements MethodBinder&lt;BindClick&gt; { @Override public void bind(Object object, BindClick annotation, Method method, Object... parameters) { View view = Views.getView(viewResolver, annotation.value(), method.getName(), object); view.setOnClickListener(new OnClickListener() { \/\/ ... }); } @Override public Class&lt;BindClick&gt; getAnnotationClass() { return BindClick.class; } } TypeBinder TypeBinders are used for annotations that target ElementType.TYPE. Example @Target({ ElementType.TYPE }) @Retention(RetentionPolicy.RUNTIME) public @interface SetValue { int value(); } public interface ValueSetter { void setValue(int value); } public class ValueBinder implements TypeBinder&lt;SetValue&gt; { @Override void bind(Object object, ValueSetter annotation, Class&lt;?&gt; annotatedType, Object... parameters) { \/\/ @SetValue only works with ValueSetter implementations if (object instanceof ValueSetter) { \/\/ Safely convert to ValueSetter ValueSetter value_holder = (ValueSetter)object; \/\/ Set the integer value int value = annotatedClass.getAnnotation().value(); value_holder.setValue(value); } else { throw new BindFailed(...); } } @Override public Class&lt;SetValue&gt; getAnnotationClass() { return SetValue.class; } } Usage: @SetValue(123) class Example implements ValueSetter { private int value; public Example() { Spork.bind(this); \/\/ ensures &quot;123&quot; is set through setValue() } @Override public void setValue(int value) { this.value = value; } } Binder registration Registering new binders must be done before the first call to bind(). Registration is done as follows: Spork.register(new YourAnnotationBinder());","tags":"","url":"Annotation_Development\/Creating_Annotations.html"},{"title":"Performance","text":"Performance Setup Several benchmarks were carefully crafted to test performance. You can find them on GitHub in the support directory. There are generally two kinds of benchmarks involved: cold cache benchmarks (contains 100 repetitions of cold cache scenario) warm cache benchmarks (contains 1000 repetitions of warm cache scenario, but starts off with cold cache) Each benchmark is then repeated 10 times and outputs are averages over those repetitions. Benchmarks are run on the following devices: Nexus 5X: Nexus 5X with Android 7.1.1 Nexus 4: Nexus 4 with Android 5.1.1 Sunset 2: Wiko Sunset 2 with Android 4.4.2 Core annotation processing speed This part describes Spork core performance: the ability to do runtime anotation processing. Measurements exclude the actual binding implementation like resolving a View from an Object, as the performance of such operations are not determined by Spork itself. Binding 1 field with cold cache: Nexus 5X: 0.069 ms to 0.072 ms Nexus 4: 0.218 ms to 0.236 ms Sunset 2: 0.099 to 0.160 ms Binding 1 field with warm cache: Nexus 5X: 0.002 ms Nexus 4: 0.005 ms Sunset 2: 0.007 ms to 0.023 ms Binding 5 fields with warm cache: Nexus 5X: 0.002 ms Nexus 4: 0.004 ms to 0.005 ms Sunset 2: 0.013 ms to 0.017 ms In conclusion, Spork's annotation processing core is extremely fast. The very first (cold cache) bind was done in 0.069 ms to 0.236 ms and a warm cache bind on a single field was done in 0.002 ms to 0.017 ms. Binding 5 fields with a warm cache increases binding time only with a few microseconds. Android annotation processing speed A benchmark with Android bindings wouldn't be of much use, as we would mostly be measuring the performance of methods such as findViewById() and setContentView(). The numbers for the core annotation processing give a decent impression of how fast injection could be with spork-android and spork-android-support. There is definitely a little bit of overhead when, injecting Spork Views\/Fragments\/etc. but this is negligable. Dependency injection speed This part describes the performance of the spork-inject library. Every measurement here includes Spork's core Annotation processing time including the dependency injection implementation's time. Injecting 1 field with cold cache: Nexus 5X: 0.087 ms to 0.105 ms Nexus 4: 0.508 ms to 0.562 ms Sunset 2: 0.258 ms to 0.641 ms Injecting 1 field with warm cache: Nexus 5X: 0.008 ms Nexus 4: 0.037 ms Sunset 2: 0.021 ms to 0.024 ms Injecting 5 fields with warm cache: Nexus 5X: 0.037 ms to 0.038 ms Nexus 4: 0.158 ms to 0.161 ms Sunset 2: 0.071 ms to 0.079 ms Injecting 1 method with cold cache: Nexus 5X: 0.062 ms to 0.071 ms Nexus 4: 0.221 ms to 0.236 ms Sunset 2: 0.187 ms to 0.261 ms Injecting 1 method with warm cache: Nexus 5X: 0.011 ms Nexus 4: 0.041 ms to 0.042 ms Sunset 2: 0.024 ms to 0.027 ms Injecting 5 method with warm cache: Nexus 5X: 0.051 ms to 0.053 ms Nexus 4: 0.200 ms to 0.204 ms Sunset 2: 0.105 ms to 0.109 ms Injecting a mixed object with warm cache: Nexus 5X: 0.039 ms Nexus 4: 0.155 ms to 0.160 ms Sunset 2: 0.101 ms to 0.106 ms In conclusion, injection is pretty fast: they generally take somewhere between 0.007 ms and 0.033 ms per field depending on the device. Method injection is slightly slower at 0.010 ms to '0.041 ms`. The very first bind on the first class might take a bit longer, but it will generally stay below 0.5 ms. On newer hardware, it will 0.1 ms or less Field injection seems to be noticably faster than method injection with speed improvements at around 30%. This is great, considering that field injection is generally the preferred way of injecting anyway.","tags":"","url":"About\/Performance\/index.html"},{"title":"Log for Nexus 4","text":"Specs (full): Released in 2012 Android 5.1.1 2GB RAM Quad-core 1.5 GHz Krait CPU 05-06 20:21:29.534 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-06 20:21:29.534 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:21:29.535 I\/System.out: - work items: 1 per benchmark 05-06 20:21:29.535 I\/System.out: - work item time: 0.236ms average 05-06 20:21:29.595 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-06 20:21:29.595 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:21:29.595 I\/System.out: - work items: 1000 per benchmark 05-06 20:21:29.595 I\/System.out: - work item time: 0.005ms average 05-06 20:21:29.649 I\/System.out: Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-06 20:21:29.649 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:21:29.649 I\/System.out: - work items: 1000 per benchmark 05-06 20:21:29.649 I\/System.out: - work item time: 0.005ms average 05-06 20:21:29.789 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-06 20:21:29.789 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:21:29.789 I\/System.out: - work items: 1 per benchmark 05-06 20:21:29.789 I\/System.out: - work item time: 0.562ms average 05-06 20:21:30.173 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-06 20:21:30.173 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:21:30.173 I\/System.out: - work items: 1000 per benchmark 05-06 20:21:30.173 I\/System.out: - work item time: 0.037ms average 05-06 20:21:31.777 I\/System.out: Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-06 20:21:31.777 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:21:31.777 I\/System.out: - work items: 1000 per benchmark 05-06 20:21:31.777 I\/System.out: - work item time: 0.159ms average 05-06 20:21:31.880 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-06 20:21:31.880 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:21:31.880 I\/System.out: - work items: 1 per benchmark 05-06 20:21:31.881 I\/System.out: - work item time: 0.236ms average 05-06 20:21:32.311 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-06 20:21:32.311 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:21:32.311 I\/System.out: - work items: 1000 per benchmark 05-06 20:21:32.312 I\/System.out: - work item time: 0.041ms average 05-06 20:21:34.357 I\/System.out: Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-06 20:21:34.358 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:21:34.358 I\/System.out: - work items: 1000 per benchmark 05-06 20:21:34.358 I\/System.out: - work item time: 0.200ms average 05-06 20:21:35.982 I\/System.out: Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-06 20:21:35.982 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:21:35.982 I\/System.out: - work items: 1000 per benchmark 05-06 20:21:35.982 I\/System.out: - work item time: 0.156ms average 05-06 20:21:57.750 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-06 20:21:57.750 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:21:57.750 I\/System.out: - work items: 1 per benchmark 05-06 20:21:57.750 I\/System.out: - work item time: 0.218ms average 05-06 20:21:57.805 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-06 20:21:57.805 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:21:57.805 I\/System.out: - work items: 1000 per benchmark 05-06 20:21:57.805 I\/System.out: - work item time: 0.005ms average 05-06 20:21:57.855 I\/System.out: Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-06 20:21:57.855 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:21:57.855 I\/System.out: - work items: 1000 per benchmark 05-06 20:21:57.855 I\/System.out: - work item time: 0.004ms average 05-06 20:21:57.998 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-06 20:21:57.998 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:21:57.998 I\/System.out: - work items: 1 per benchmark 05-06 20:21:57.998 I\/System.out: - work item time: 0.553ms average 05-06 20:21:58.379 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-06 20:21:58.379 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:21:58.379 I\/System.out: - work items: 1000 per benchmark 05-06 20:21:58.379 I\/System.out: - work item time: 0.037ms average 05-06 20:21:59.975 I\/System.out: Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-06 20:21:59.975 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:21:59.975 I\/System.out: - work items: 1000 per benchmark 05-06 20:21:59.975 I\/System.out: - work item time: 0.158ms average 05-06 20:22:00.074 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-06 20:22:00.074 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:22:00.074 I\/System.out: - work items: 1 per benchmark 05-06 20:22:00.074 I\/System.out: - work item time: 0.221ms average 05-06 20:22:00.506 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-06 20:22:00.506 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:22:00.506 I\/System.out: - work items: 1000 per benchmark 05-06 20:22:00.507 I\/System.out: - work item time: 0.042ms average 05-06 20:22:02.586 I\/System.out: Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-06 20:22:02.586 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:22:02.586 I\/System.out: - work items: 1000 per benchmark 05-06 20:22:02.586 I\/System.out: - work item time: 0.203ms average 05-06 20:22:04.243 I\/System.out: Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-06 20:22:04.243 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:22:04.243 I\/System.out: - work items: 1000 per benchmark 05-06 20:22:04.243 I\/System.out: - work item time: 0.160ms average 05-06 20:22:14.233 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-06 20:22:14.233 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:22:14.233 I\/System.out: - work items: 1 per benchmark 05-06 20:22:14.233 I\/System.out: - work item time: 0.222ms average 05-06 20:22:14.288 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-06 20:22:14.288 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:22:14.288 I\/System.out: - work items: 1000 per benchmark 05-06 20:22:14.288 I\/System.out: - work item time: 0.005ms average 05-06 20:22:14.345 I\/System.out: Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-06 20:22:14.345 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:22:14.345 I\/System.out: - work items: 1000 per benchmark 05-06 20:22:14.345 I\/System.out: - work item time: 0.005ms average 05-06 20:22:14.471 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-06 20:22:14.471 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:22:14.471 I\/System.out: - work items: 1 per benchmark 05-06 20:22:14.471 I\/System.out: - work item time: 0.508ms average 05-06 20:22:14.854 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-06 20:22:14.854 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:22:14.854 I\/System.out: - work items: 1000 per benchmark 05-06 20:22:14.854 I\/System.out: - work item time: 0.037ms average 05-06 20:22:16.484 I\/System.out: Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-06 20:22:16.484 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:22:16.484 I\/System.out: - work items: 1000 per benchmark 05-06 20:22:16.484 I\/System.out: - work item time: 0.161ms average 05-06 20:22:16.582 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-06 20:22:16.583 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:22:16.583 I\/System.out: - work items: 1 per benchmark 05-06 20:22:16.583 I\/System.out: - work item time: 0.221ms average 05-06 20:22:17.019 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-06 20:22:17.019 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:22:17.019 I\/System.out: - work items: 1000 per benchmark 05-06 20:22:17.019 I\/System.out: - work item time: 0.042ms average 05-06 20:22:19.107 I\/System.out: Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-06 20:22:19.107 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:22:19.107 I\/System.out: - work items: 1000 per benchmark 05-06 20:22:19.107 I\/System.out: - work item time: 0.204ms average 05-06 20:22:20.709 I\/System.out: Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-06 20:22:20.709 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:22:20.709 I\/System.out: - work items: 1000 per benchmark 05-06 20:22:20.709 I\/System.out: - work item time: 0.155ms average","tags":"","url":"About\/Performance\/Log_for_Nexus_4.html"},{"title":"Log for Nexus 5X","text":"Specs (full): Released in 2015 Android 7.1.1 2GB RAM Hexa-core CPU (4x1.4 GHz Cortex-A53 &amp; 2x1.8 GHz Cortex-A57) 05-06 20:23:56.042 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-06 20:23:56.043 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:23:56.043 I\/System.out: - work items: 1 per benchmark 05-06 20:23:56.043 I\/System.out: - work item time: 0.070ms average 05-06 20:23:56.063 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-06 20:23:56.063 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:23:56.063 I\/System.out: - work items: 1000 per benchmark 05-06 20:23:56.063 I\/System.out: - work item time: 0.002ms average 05-06 20:23:56.085 I\/System.out: Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-06 20:23:56.085 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:23:56.085 I\/System.out: - work items: 1000 per benchmark 05-06 20:23:56.085 I\/System.out: - work item time: 0.002ms average 05-06 20:23:56.108 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-06 20:23:56.108 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:23:56.108 I\/System.out: - work items: 1 per benchmark 05-06 20:23:56.108 I\/System.out: - work item time: 0.105ms average 05-06 20:23:56.194 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-06 20:23:56.194 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:23:56.194 I\/System.out: - work items: 1000 per benchmark 05-06 20:23:56.194 I\/System.out: - work item time: 0.008ms average 05-06 20:23:56.577 I\/System.out: Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-06 20:23:56.577 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:23:56.577 I\/System.out: - work items: 1000 per benchmark 05-06 20:23:56.577 I\/System.out: - work item time: 0.038ms average 05-06 20:23:56.595 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-06 20:23:56.595 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:23:56.595 I\/System.out: - work items: 1 per benchmark 05-06 20:23:56.595 I\/System.out: - work item time: 0.071ms average 05-06 20:23:56.710 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-06 20:23:56.711 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:23:56.711 I\/System.out: - work items: 1000 per benchmark 05-06 20:23:56.711 I\/System.out: - work item time: 0.011ms average 05-06 20:23:57.243 I\/System.out: Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-06 20:23:57.243 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:23:57.243 I\/System.out: - work items: 1000 per benchmark 05-06 20:23:57.243 I\/System.out: - work item time: 0.052ms average 05-06 20:23:57.644 I\/System.out: Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-06 20:23:57.644 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:23:57.644 I\/System.out: - work items: 1000 per benchmark 05-06 20:23:57.645 I\/System.out: - work item time: 0.039ms average 05-06 20:24:30.767 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-06 20:24:30.768 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:24:30.768 I\/System.out: - work items: 1 per benchmark 05-06 20:24:30.768 I\/System.out: - work item time: 0.072ms average 05-06 20:24:30.787 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-06 20:24:30.787 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:30.787 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:30.787 I\/System.out: - work item time: 0.002ms average 05-06 20:24:30.806 I\/System.out: Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-06 20:24:30.806 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:30.806 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:30.806 I\/System.out: - work item time: 0.002ms average 05-06 20:24:30.827 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-06 20:24:30.827 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:24:30.827 I\/System.out: - work items: 1 per benchmark 05-06 20:24:30.827 I\/System.out: - work item time: 0.094ms average 05-06 20:24:30.913 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-06 20:24:30.913 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:30.913 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:30.913 I\/System.out: - work item time: 0.008ms average 05-06 20:24:31.290 I\/System.out: Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-06 20:24:31.290 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:31.290 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:31.290 I\/System.out: - work item time: 0.037ms average 05-06 20:24:31.306 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-06 20:24:31.306 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:24:31.306 I\/System.out: - work items: 1 per benchmark 05-06 20:24:31.306 I\/System.out: - work item time: 0.066ms average 05-06 20:24:31.421 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-06 20:24:31.421 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:31.421 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:31.421 I\/System.out: - work item time: 0.011ms average 05-06 20:24:31.943 I\/System.out: Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-06 20:24:31.943 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:31.943 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:31.943 I\/System.out: - work item time: 0.051ms average 05-06 20:24:32.347 I\/System.out: Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-06 20:24:32.347 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:32.347 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:32.347 I\/System.out: - work item time: 0.039ms average 05-06 20:24:45.806 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-06 20:24:45.806 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:24:45.806 I\/System.out: - work items: 1 per benchmark 05-06 20:24:45.806 I\/System.out: - work item time: 0.069ms average 05-06 20:24:45.827 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-06 20:24:45.827 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:45.827 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:45.827 I\/System.out: - work item time: 0.002ms average 05-06 20:24:45.849 I\/System.out: Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-06 20:24:45.849 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:45.849 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:45.849 I\/System.out: - work item time: 0.002ms average 05-06 20:24:45.868 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-06 20:24:45.868 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:24:45.868 I\/System.out: - work items: 1 per benchmark 05-06 20:24:45.868 I\/System.out: - work item time: 0.087ms average 05-06 20:24:45.953 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-06 20:24:45.953 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:45.953 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:45.953 I\/System.out: - work item time: 0.008ms average 05-06 20:24:46.328 I\/System.out: Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-06 20:24:46.328 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:46.328 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:46.328 I\/System.out: - work item time: 0.037ms average 05-06 20:24:46.343 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-06 20:24:46.343 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:24:46.343 I\/System.out: - work items: 1 per benchmark 05-06 20:24:46.343 I\/System.out: - work item time: 0.062ms average 05-06 20:24:46.453 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-06 20:24:46.453 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:46.453 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:46.453 I\/System.out: - work item time: 0.011ms average 05-06 20:24:46.989 I\/System.out: Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-06 20:24:46.989 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:46.989 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:46.989 I\/System.out: - work item time: 0.053ms average 05-06 20:24:47.392 I\/System.out: Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-06 20:24:47.392 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:24:47.392 I\/System.out: - work items: 1000 per benchmark 05-06 20:24:47.392 I\/System.out: - work item time: 0.039ms average","tags":"","url":"About\/Performance\/Log_for_Nexus_5X.html"},{"title":"Log for Wiko Sunset 2","text":"Specs (full): Released in 2015 Android 4.4.2 512MB RAM Dual-core 1.3 GHz Cortex-A7 CPU 05-06 20:26:34.248 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-06 20:26:34.248 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:26:34.249 I\/System.out: - work items: 1 per benchmark 05-06 20:26:34.250 I\/System.out: - work item time: 0.160ms average 05-06 20:26:34.530 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-06 20:26:34.530 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:26:34.530 I\/System.out: - work items: 1000 per benchmark 05-06 20:26:34.530 I\/System.out: - work item time: 0.023ms average 05-06 20:26:34.670 I\/System.out: Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-06 20:26:34.670 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:26:34.670 I\/System.out: - work items: 1000 per benchmark 05-06 20:26:34.670 I\/System.out: - work item time: 0.013ms average 05-06 20:26:34.762 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-06 20:26:34.762 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:26:34.762 I\/System.out: - work items: 1 per benchmark 05-06 20:26:34.762 I\/System.out: - work item time: 0.454ms average 05-06 20:26:35.015 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-06 20:26:35.015 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:26:35.015 I\/System.out: - work items: 1000 per benchmark 05-06 20:26:35.015 I\/System.out: - work item time: 0.024ms average 05-06 20:26:35.758 I\/System.out: Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-06 20:26:35.758 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:26:35.758 I\/System.out: - work items: 1000 per benchmark 05-06 20:26:35.758 I\/System.out: - work item time: 0.073ms average 05-06 20:26:35.819 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-06 20:26:35.819 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:26:35.820 I\/System.out: - work items: 1 per benchmark 05-06 20:26:35.820 I\/System.out: - work item time: 0.253ms average 05-06 20:26:36.107 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-06 20:26:36.107 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:26:36.107 I\/System.out: - work items: 1000 per benchmark 05-06 20:26:36.107 I\/System.out: - work item time: 0.027ms average 05-06 20:26:37.203 I\/System.out: Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-06 20:26:37.203 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:26:37.203 I\/System.out: - work items: 1000 per benchmark 05-06 20:26:37.203 I\/System.out: - work item time: 0.105ms average 05-06 20:26:38.274 I\/System.out: Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-06 20:26:38.274 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:26:38.274 I\/System.out: - work items: 1000 per benchmark 05-06 20:26:38.274 I\/System.out: - work item time: 0.101ms average 05-06 20:27:28.663 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-06 20:27:28.663 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:27:28.663 I\/System.out: - work items: 1 per benchmark 05-06 20:27:28.663 I\/System.out: - work item time: 0.136ms average 05-06 20:27:28.752 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-06 20:27:28.752 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:27:28.752 I\/System.out: - work items: 1000 per benchmark 05-06 20:27:28.752 I\/System.out: - work item time: 0.007ms average 05-06 20:27:28.964 I\/System.out: Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-06 20:27:28.964 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:27:28.964 I\/System.out: - work items: 1000 per benchmark 05-06 20:27:28.965 I\/System.out: - work item time: 0.017ms average 05-06 20:27:29.132 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-06 20:27:29.132 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:27:29.133 I\/System.out: - work items: 1 per benchmark 05-06 20:27:29.133 I\/System.out: - work item time: 0.641ms average 05-06 20:27:29.397 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-06 20:27:29.397 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:27:29.397 I\/System.out: - work items: 1000 per benchmark 05-06 20:27:29.397 I\/System.out: - work item time: 0.023ms average 05-06 20:27:30.142 I\/System.out: Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-06 20:27:30.142 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:27:30.142 I\/System.out: - work items: 1000 per benchmark 05-06 20:27:30.142 I\/System.out: - work item time: 0.071ms average 05-06 20:27:30.223 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-06 20:27:30.223 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:27:30.223 I\/System.out: - work items: 1 per benchmark 05-06 20:27:30.223 I\/System.out: - work item time: 0.261ms average 05-06 20:27:30.475 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-06 20:27:30.475 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:27:30.475 I\/System.out: - work items: 1000 per benchmark 05-06 20:27:30.475 I\/System.out: - work item time: 0.024ms average 05-06 20:27:31.588 I\/System.out: Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-06 20:27:31.588 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:27:31.588 I\/System.out: - work items: 1000 per benchmark 05-06 20:27:31.588 I\/System.out: - work item time: 0.109ms average 05-06 20:27:32.699 I\/System.out: Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-06 20:27:32.699 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:27:32.699 I\/System.out: - work items: 1000 per benchmark 05-06 20:27:32.699 I\/System.out: - work item time: 0.106ms average 05-06 20:31:34.566 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-06 20:31:34.566 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:31:34.567 I\/System.out: - work items: 1 per benchmark 05-06 20:31:34.567 I\/System.out: - work item time: 0.099ms average 05-06 20:31:34.740 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-06 20:31:34.740 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:31:34.741 I\/System.out: - work items: 1000 per benchmark 05-06 20:31:34.741 I\/System.out: - work item time: 0.012ms average 05-06 20:31:34.907 I\/System.out: Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-06 20:31:34.907 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:31:34.907 I\/System.out: - work items: 1000 per benchmark 05-06 20:31:34.907 I\/System.out: - work item time: 0.014ms average 05-06 20:31:34.961 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-06 20:31:34.961 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:31:34.961 I\/System.out: - work items: 1 per benchmark 05-06 20:31:34.961 I\/System.out: - work item time: 0.258ms average 05-06 20:31:35.188 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-06 20:31:35.188 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:31:35.188 I\/System.out: - work items: 1000 per benchmark 05-06 20:31:35.188 I\/System.out: - work item time: 0.021ms average 05-06 20:31:35.990 I\/System.out: Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-06 20:31:35.990 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:31:35.990 I\/System.out: - work items: 1000 per benchmark 05-06 20:31:35.990 I\/System.out: - work item time: 0.079ms average 05-06 20:31:36.037 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-06 20:31:36.037 I\/System.out: - benchmark repeat: 100 time(s) 05-06 20:31:36.037 I\/System.out: - work items: 1 per benchmark 05-06 20:31:36.037 I\/System.out: - work item time: 0.187ms average 05-06 20:31:36.315 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-06 20:31:36.315 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:31:36.315 I\/System.out: - work items: 1000 per benchmark 05-06 20:31:36.315 I\/System.out: - work item time: 0.026ms average 05-06 20:31:37.386 I\/System.out: Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-06 20:31:37.386 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:31:37.386 I\/System.out: - work items: 1000 per benchmark 05-06 20:31:37.386 I\/System.out: - work item time: 0.105ms average 05-06 20:31:38.477 I\/System.out: Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-06 20:31:38.477 I\/System.out: - benchmark repeat: 10 time(s) 05-06 20:31:38.477 I\/System.out: - work items: 1000 per benchmark 05-06 20:31:38.477 I\/System.out: - work item time: 0.104ms average","tags":"","url":"About\/Performance\/Log_for_Wiko_Sunset_2.html"}]}