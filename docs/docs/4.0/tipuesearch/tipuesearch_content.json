{"pages":[{"title":"Spork 4.0 Documentation","text":"Welcome Welcome to the Spork documentation website. The menu on the left will cover all main Spork projects. Projects Main spork: the annotation processing core spork-android and spork-android-support: Android bindings similar to Butterknife spork-inject: dependency injectino similar to Dagger Support Spork contains several support projects which are not published on jcenter, but are available in the repository: spork-android-example: an example project of how to use Spork on Android spork-benchmark: Java benchmarks spork-benchmark-android: Android application with Java benchmarks spork-matchers: Hamcrest matchers for Spork tests spork-proguard: Test application for ProGuard (will be migrated to spork-android-example in the future) Migrating from 3.x repository is moved to jCenter with snapshots at http:\/\/dl.bintray.com\/bytewelder\/maven-snapshot base packages renamed from io.github.sporklibrary to spork @BindComponent is now @Inject and injection is done with dependencies defined by an ObjectGraph and its modules. @ComponentScope(Scope.SINGLETON) is now @Singleton removed custom support for RecyclerView.ViewHolder as you can now make it implement ViewProvider FieldBinder, MethodBinder and TypeBinder interfaces are changed","tags":"","url":"index.html"},{"title":"Android","text":"Introduction Spork for Android allows you to write less Android boilerplate code so you can focus on the more importants parts when writing applications. Spork for Android dependencies come in 2 flavors: spork-android which provides all basic Android injection spork-android-support which provides injection for android.support.v4.app.Fragment Dependencies All dependencies are published to jcenter. When not using AppCompat\/Support libraries: dependencies { compile 'com.bytewelder.spork:spork-android:4.0.0@aar' } When using AppCompat\/Support libraries: dependencies { compile 'com.bytewelder.spork:spork-android-support:4.0.0@aar' { exclude group: 'com.android.support' } } Example @BindLayout(R.layout.activity_download) public class YourActivity extends Activity { @BindView(R.id.your_button) private Button button; @BindFragment(R.id.your_fragment) private DetailsFragment fragment; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Spork.bind(this); } @BindClick(R.id.other_button) private void onClickButton(Button button) { \/\/ handle click } }","tags":"","url":"Android\/index.html"},{"title":"BindClick","text":"@BindClick This annotation can be used with classes inheriting\/implementing: android.app.Activity android.app.Fragment android.support.v4.app.Fragment (with the spork-android-support dependency) android.view.View spork.android.ViewProvider You can specify the view id as the annotation value: @BindClick(R.id.download_button) private void onClickDownload() { } Alternatively, you can imply the view id by the method name: @BindClick private void download_button() { } You can also pass the any compatible View instance as method argument: @BindClick(R.id.download_button) private void onClickDownload(Button button) { }","tags":"","url":"Android\/Annotations\/BindClick.html"},{"title":"BindFragment","text":"@BindFragment This annotation can be used with classes derived from: android.app.Activity android.app.Fragment android.support.v4.app.Fragment (with the spork-android-support dependency) You can bind a fragment by specifying its id: @BindFragment(R.id.my_fragment) private Fragment myFragment; Alternatively, you can imply the fragment id by the field name: @BindFragment private Fragment my_fragment;","tags":"","url":"Android\/Annotations\/BindFragment.html"},{"title":"BindLayout","text":"@BindLayout This annotation can be used with classes inheriting: android.app.Activity android.view.ViewGroup When using it for ViewGroup, a FrameLayout is preferred as the inflated layout will be added as a child to it. Example: Activity @BindLayout(R.layout.activity_custom) public class CustomActivity extends Activity { @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Spork.bind(this); } } Example: ViewGroup @BindLayout(R.layout.view_custom) public class CustomView extends FrameLayout { public MyView(Context context) { super(context); Spork.bind(this); } }","tags":"","url":"Android\/Annotations\/BindLayout.html"},{"title":"BindResource","text":"@BindResoure This annotation can be used with classes inheriting\/implementing: android.app.Activity android.app.Application android.app.Fragment android.app.Service android.content.ContentProvider android.support.v4.app.Fragment (with the spork-android-support dependency) android.view.View spork.android.ContextProvider spork.android.ViewProvider It can bind: R.dimen.* to Float or float fields R.string.* to String fields R.integer.* to Integer and int fields R.bool.* to Boolean and boolean fields R.drawable.* to Drawable fields You can bind a resource by specifying its id: @BindResource(R.string.app_name) private String appName; Alternatively, you can imply the view id by the field name: @BindResource private String app_name; Example public class MyActivity extends Activity { @BindResource(R.string.app_name) private String appName; @BindResource private String app_name; @BindResource(R.dimen.spork_test_dimension) private float sporkTestDimension; @BindResource private Float spork_test_dimension; @BindResource(R.drawable.spork_test_drawable) private Drawable sporkTestDrawable; @BindResource private Drawable spork_test_drawable; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Spork.bind(this); } }","tags":"","url":"Android\/Annotations\/BindResource.html"},{"title":"BindView","text":"@BindView This annotation can be used with classes inheriting\/implementing: android.app.Activity android.app.Fragment android.support.v4.app.Fragment (with the spork-android-support dependency) android.view.View spork.android.ViewProvider You can bind a view by specifying its id: @BindView(R.id.my_button) private Button button; Alternatively, you can imply the view id by the field name: @BindView private Button my_button;","tags":"","url":"Android\/Annotations\/BindView.html"},{"title":"Activity","text":"Activity Introduction The following annotations are supported: @BindClick @BindView @BindLayout @BindResource @BindFragment Example @BindLayout(R.layout.activity_download) public class DownloadActivity extends Activity { @BindView(R.id.download_button) private Button downloadButton; @BindFragment(R.id.details_fragment) private DetailsFragment fragment; public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Spork.bind(this); } @BindClick(R.id.other_button) private void onClickButton(Button someButton) { downloadManager.startDownload(); } }","tags":"","url":"Android\/Examples\/Activity.html"},{"title":"Application","text":"Application Introduction The following annotations are supported: @BindResource Example public class MyApplication extends android.app.Application { @BindResource(R.string.app_name) private String appName; @Override public void onCreate() { super.onCreate(); Spork.bind(this); } }","tags":"","url":"Android\/Examples\/Application.html"},{"title":"ContentProvider","text":"ContentProvider Introduction The following annotations are supported: @BindResource Example public class CustomContentProvider extends ContentProvider { @BindResource(R.string.helloworld) private String helloWorld; @Override public boolean onCreate() { Spork.bind(this); return true; } \/\/ ContentProvider methods }","tags":"","url":"Android\/Examples\/ContentProvider.html"},{"title":"Fragment","text":"Fragment Introduction You can also use android.support.v4.app.Fragment if you add the spork-android-support dependency. The following annotations are supported: @BindClick @BindView @BindResource @BindFragment @Inject Example public class MyFragment extends Fragment { @BindView(R.id.some_textview) private TextView myTextView; @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_click_binding, container); } @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { Spork.bind(this); } @BindClick(R.id.some_button) private void onClick() { \/\/ click-handling code goes here } }","tags":"","url":"Android\/Examples\/Fragment.html"},{"title":"RecyclerView","text":"RecyclerView Introduction To bind RecyclerView views, you need to make RecyclerView.ViewHolder implement spork.android.ViewProvider. The following annotations are supported: @BindView @BindClick @BindResource Example public class MyAdapter extends RecyclerView.Adapter&lt;MyAdapter.MyViewHolder&gt; { private final List&lt;String&gt; items; public MyAdapter(List&lt;String&gt; items) { this.items = items; } public class MyViewHolder extends RecyclerView.ViewHolder implements ViewProvider { @BindView(R.id.textview) private TextView textView; public MyViewHolder(View itemView) { super(itemView); Spork.bind(this); } public void update(String text) { textView.setText(text); } @BindClick(R.id.textview) private void onClick() { \/\/ ... } @Override public View getView() { return itemView; } } @Override public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { LayoutInflater inflater = LayoutInflater.from(parent.getContext()); View view = inflater.inflate(R.layout.view_recyclerview_item, parent, false); return new MyViewHolder(view); } @Override public void onBindViewHolder(MyViewHolder holder, int position) { String item = items.get(position); holder.update(item); } @Override public int getItemCount() { return items.size(); } }","tags":"","url":"Android\/Examples\/RecyclerView.html"},{"title":"Service","text":"Service Introduction The following annotations are supported: @BindResource Example public class TestService extends Service { @BindResource(R.string.helloworld) private String helloWorld; public class LocalBinder extends Binder { public TestService getLocalService() { return TestService.this; } } @Override public void onCreate() { super.onCreate(); Spork.bind(this); } @Override public @Nullable IBinder onBind(Intent intent) { return new LocalBinder(); } }","tags":"","url":"Android\/Examples\/Service.html"},{"title":"View","text":"View Introduction When creating a custom view, it's best to extend a FrameLayout, because @BindLayout will inflate the specified layout into it. The following annotations are supported: @BindClick @BindView @BindLayout @BindResource Example @BindLayout(R.layout.view_layout_binding) public class MyView extends FrameLayout { (R.id.textview) private TextView textView; public MyView(Context context) { super(context); \/\/ Note: Spork.bind() must be called in \/\/ all constructors that are implemented! Spork.bind(this); } @BindClick(R.id.button_one) private void onClickDownload() { \/\/ ... } \/\/ BindClick can also pass the button that was clicked @BindClick(R.id.button_two) private void onClickOtherButton(Button otherButton) { \/\/ ... } }","tags":"","url":"Android\/Examples\/View.html"},{"title":"ProGuard","text":"ProGuard &amp; DexGuard When using spork-android or spork-android-support, your ProGuard configurations are provided by the library. When using spork-inject, you should manually configure ProGuard\/DexGuard for the injectable classes. For example: -keep class com.yourapp.modules.** { *; } -keep interface com.yourapp.interfaces.** { *; }","tags":"","url":"Android\/ProGuard.html"},{"title":"Dependency Injection","text":"Introduction Spork Inject is a fast runtime dependency injection framework for Java\/Android and is modeled on the JSR-330 specification. Some advantages of Spork Inject: Write less boilerplate code Manage your dependencies more easily Improve testability: swap or override dependencies for tests No code generation, which makes the code easier to review Decrease coupling between a class and its dependencies Forces you to think about your class dependencies, which can lead to better application design Dependencies Add the following dependencies in build.gradle: repositories { jcenter() } dependencies { compile 'com.bytewelder.spork:spork-inject:4.0.0' } Example public class BrewModule { @Provides public Mug provideMug() { return new MugWithPrint(&quot;Input Java, output Java.&quot;); } @Provides public Water provideWater() { return new BoilingWater(); } @Provides public Beans provideBeans() { return new ArabicaBeans(); } @Provides public Coffee provideCoffee(Water water, CoffeeBeans beans) { return new BlackCoffee(water, beans); } } class CoffeeMug { @Inject private Coffee coffee; @Inject private Mug mug; public CoffeeMug() { ObjectGraphs.builder() .module(new BrewModule()) .build() .inject(this); \/\/ same as Spork.inject(this, objectGraph) } }","tags":"","url":"Dependency_Injection\/index.html"},{"title":"User Guide","text":"Using Spork Inject The spork-inject library creates instances of your classes and satisfies their dependencies. Let's first take a look at a standard constructor injection without spork-inject: class CoffeeMug { private Coffee coffee; private Mug mug; CoffeeMug(Coffee coffee, Mug mug) { this.coffee = coffee; this.mug = mug; } } Creating a CoffeeMug requires you to pass along its dependencies manually. This is not a difficult task for a simple object with simple dependencies, but it gets a lot more tedious with scopes and lifecycle considerations. Spork takes care of all that. Spork can inject fields directly. In this example it obtains a Coffee and a Mug instance for the respective fields: class CoffeeMug { @Inject private Coffee coffee; @Inject private Mug mug; ... } Spork also supports method injection, but Field injection is generally preferred. Declaring Dependencies In the above sample, a Coffee and Mug are injected. Of course these dependencies must come from somewhere. Dependencies should be defined in a Module: @Provides public Coffee provideCoffee() { return new BlackCoffee(); } It's possible for a @Provides method to require dependencies on its own by passing them as method arguments: @Provides public Coffee provideCoffee(Water water, CoffeeBeans beans) { return new BlackCoffee(water, beans); } Modules The @Provides-annotated methods above are placed in a Module. Modules are POJO objects that define a set of dependencies: public class BrewModule { @Provides public Mug provideMug() { return new MugWithPrint(&quot;Input Java, output Java.&quot;); } @Provides public Water provideWater() { return new BoilingWater(); } @Provides public Beans provideBeans() { return new ArabicaBeans(); } @Provides public Coffee provideCoffee(Water water, CoffeeBeans beans) { return new BlackCoffee(water, beans); } } Building an ObjectGraph One or more modules are used to build an object graph. Object graphs hold state such as your singletons and named instances. Creating an ObjectGraph is easy: ObjectGraph objectGraph = ObjectGraphs.builder() .module(new BrewModule()) .build(); When putting it all together, the CoffeeMug can now be injected with an ObjectGraph made with the BrewModule: class CoffeeMug { @Inject private Coffee coffee; @Inject private Mug mug; public CoffeeMug() { ObjectGraphs.builder() .module(new BrewModule()) .build() .inject(this); \/\/ same as Spork.inject(this, objectGraph) } } ObjectGraph with parent An object graph can have a parent object graph: ObjectGraph objectGraph = ObjectGraphs.builder(applicationObjectGraph) .module(new BrewModule()) .build(); This way, it can resolve dependencies from its parent and from the BrewModule. An ObjectGraph's modules can override the dependencies of the parent as long as the injection signature is an exact match: its type, qualifier and nullability must match. Scoped injection A scoped instance is an instance that belongs to a specific ObjectGraph created at a specific level of the application. It is tied to the lifecycle of that ObjectGraph. @Singleton is a predefined scope that is always available at the root ObjectGraph in your application. It is tied to the lifecycle of that ObjectGraph. @Provides methods in a module can specify a scope. It can be used like this: @Provides @Singleton CoffeeService provideCoffeeService() { return new CoffeeServiceImpl(); } You can also create custom scopes, which can look like this: @Provides @LocationScope(AMSTERDAM) CoffeeService provideCoffeeService() { return new CoffeeServiceImpl(); } In this case, the Service is bound to the lifecycle of the ObjectGraph that defines the LocationScope. Lazy injection Instead of injecting an instance directly, they can also injected on a Lazy&lt;T&gt; field. When get() is called on the Lazy field, it will retrieve the injected instance from the module. Calling get() multiple times will return the same instances every time. class Programmer { @Inject private Lazy&lt;CoffeeMug&gt; coffeeMug; public Programmer() { ... drink(coffeeMug.get()); } } Provider injection A Provider&lt;T&gt; is similar to a Lazy&lt;T&gt; field, but injects a new instance every time it is called. Injecting Provider&lt;T&gt; is generally not advised. You might want to use the factory pattern instead or re-organize your logic and use a Lazy&lt;T&gt; field instead. class Programmer { @Inject private Provider&lt;CoffeeMug&gt; coffeeMug; public Programmer() { ... drink(coffeeMug.get()); } } Qualifiers In some cases, you might want to identify an injection by some kind of identifier. This is done with a qualifier. The @Named annotation is a qualifier that is available by default. It can be used in a module: class WaterModule { @Provides @Named(&quot;cold&quot;) public Water provideColdWater() { ... } @Provides @Named(&quot;hot&quot;) public Water provideHotWater() { ... } } WaterModule can then be used to inject a Faucet class with the same annotation: class Faucet { @Inject @Named(&quot;cold&quot;) Water coldWater; @Inject @Named(&quot;hot&quot;) Water hotWater; ... } Custom qualifiers You can also define your own qualifiers. For example: @Qualifier @Retention(RUNTIME) public @interface Colored { } Using a value() method is also supported: @Qualifier @Retention(RUNTIME) public @interface Colored { Color value() default Color.WHITE; } The output of value() is used to create a unique identifier. This is done internally by calling toString() on Color. Adding spork to your project repositories { jcenter() } dependencies { compile 'com.bytewelder.spork:spork-inject:4.0.0' } Note: Before release, spork-inject is available at maven repository http:\/\/dl.bintray.com\/bytewelder\/maven-snapshot License Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http:\/\/www.apache.org\/licenses\/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","tags":"","url":"Dependency_Injection\/User_Guide.html"},{"title":"ObjectGraphs","text":"objectGraphFrom() Linking ObjectGraph instances can seem tricky at first. Let's assume these Android objects: public class YourApplication extends Application { ... } public class YourActivity extends Activity { ... } Firstly you want to enrich YourAppication class with an ObjectGraph: public class YourApplication extends Application { private ObjectGraph objectGraph; @Override public void onCreate() { super.onCreate(); objectGraph = ObjectGraphs.builder() .module(new ExampleApplicationModule()) .build(); } \/\/ Expose it to Activities, Fragments, etc. public ObjectGraph getObjectGraph() { return objectGraph; } } The next step is to also inject YourActivity. Many people would (wrongly) chose to do this: public class YourActivity extends Activity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { ((YourApplication) getApplication).getObjectGraph().inject(this); } } It is better to make YourAppication implement ObjectGraphProvider as follows: public class YourApplication extends Application implements ObjectGraphProvider { private ObjectGraph objectGraph; @Override public void onCreate() { super.onCreate(); objectGraph = ObjectGraphs.builder() .module(new ExampleApplicationModule()) .build(); } @Override &lt;-- is now part of the ObjectGraphProvider interface public ObjectGraph getObjectGraph() { return objectGraph; } } With a handy utility from spork-inject, you can now easily access the ObjectGraph from YourActivity: public class YourActivity extends Activity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { objectGraphFrom(getApplication()).inject(this); } } objectGraphFrom() does a type check to see if YourApplication implements the right interface. If not, it will throw a RuntimeException.","tags":"","url":"Dependency_Injection\/ObjectGraphs.html"},{"title":"Custom Scopes","text":"Scopes can be custom-made. Firstly you need to define the annotation for your scope: @Scope @Retention(RetentionPolicy.RUNTIME) private @interface SessionScope { } The root ObjectGraph will always automatically define the Singleton scope, as the root ObjectGraph will contain all singleton instances. Let's consider these classes: Application: Main application instance, injected by ApplicationModule Session: A session started in the application, injected by SessionModule Screen: A view controller that exists in the Session's scope, injected by ScreenModule For this we need to define some modules: class ApplicationModule { ... } class SessionModule { static final AtomicInteger counter = new AtomicInteger(); @Provides @SessionScope public Integer provideSessionId() { return counter.incrementAndGet(); } } class ScreenModule { ... } These are some classes that could be injected by the above modules: private static class Application { final ObjectGraph appGraph; ... public Application() { appGraph = ObjectGraphs.builder() .module(new ApplicationModule()) .build(); appGraph.inject(this); } } private static class Session { final ObjectGraph sessionGraph; @Inject Integer sessionId; \/\/ create an ObjectGraph based on AppGraph, using SessionScope as scope public Session(ObjectGraph appGraph) { ObjectGraph sessionGraph = ObjectGraphs.builder() .scope(SessionScope.class) .module(new SessionModule()) .build(); sessionGraph.inject(this); } } private static class Screen { final ObjectGraph screenGraph; @Inject Integer sessionId; public Screen(ObjectGraph sessionGraph) { screenGraph = ObjectGraphs.builder() .module(new ScreenModule()) .build(); screenGraph.inject(this) } public Integer getSessionId() { return sessionId; } } The Screen is now bound to a Session. Any newly created Screen that is started with the same ObjectGraph from the created Session will share its SessionScope instances.","tags":"","url":"Dependency_Injection\/Custom_Scopes.html"},{"title":"Migrating from Dagger","text":"Migrating from Dagger These are the main differences between Dagger and Spork: Components are replaced by ObjectGraph and also depends on module classes Provides and Lazy classes are in the spork.inject package No need to annotate your module classes with @Module Spork is able to inject private fields and methods Dagger annotations that Spork doesn't support (yet): @Reusable @ForReleasableReferences @BindsOptionalOf Multibindings (@IntoSet, @IntoMap) Producers (@ProducerModule, @Produces)","tags":"","url":"Dependency_Injection\/Migrating_from_Dagger.html"},{"title":"Annotation Development","text":"Introduction Spork Core contains the basic building blocks where the other Spork libraries are built upon. It is provides annotation processing interfaces for classes(&quot;types&quot;), fields and methods. Dependencies Add the following dependencies in build.gradle: repositories { jcenter() } dependencies { compile 'com.bytewelder.spork:spork:4.0.0' }","tags":"","url":"Annotation_Development\/index.html"},{"title":"Creating Annotations","text":"Creating Annotations Overview Spork annotations are bound through one or more of: MethodBinder FieldBinder TypeBinder These binders are registered with Spork.register() FieldBinder FieldBinders are used for annotations that target ElementType.FIELD. Example Note: this is not the real implementation of Spork's BindViewBinder. public class BindViewBinder implements FieldBinder&lt;BindView&gt; { @Override public void bind(Object object, BindView annotation, Field field, Object... parameters) throws BindFailed { if (!Activity.class.isAssignableFrom(object.getClass())) { throw new BindFailed(&quot;Parent object is not an Activity&quot;); } if (!View.class.isAssignableFrom(field.getType())) { throw new BindFailed(&quot;Field is not a View&quot;); } Activity activity = (Activity) object; View view = activity.findViewById(annotation.value()); Reflection.setFieldValue(field, object, view); } @Override public Class&lt;BindView&gt; getAnnotationClass() { return BindView.class; } } MethodBinder MethodBinders are used for annotations that target ElementType.METHOD. Example Note: this is not the real implementation of Spork's BindClickBinder. public class BindClickBinder implements MethodBinder&lt;BindClick&gt; { @Override public void bind(Object object, BindClick annotation, Method method, Object... parameters) throws BindFailed { if (!Activity.class.isAssignableFrom(object.getClass())) { throw new BindFailed(&quot;Parent object is not an Activity&quot;); } if (!View.class.isAssignableFrom(field.getType())) { throw new BindFailed(&quot;Field is not a View&quot;); } Activity activity = (Activity) object; View view = activity.findViewById(annotation.value()); view.setOnClickListener(new OnClickListener() { \/\/ ... }); } @Override public Class&lt;BindClick&gt; getAnnotationClass() { return BindClick.class; } } TypeBinder TypeBinders are used for annotations that target ElementType.TYPE. Example @Target({ ElementType.TYPE }) @Retention(RetentionPolicy.RUNTIME) public @interface SetValue { int value(); } public interface ValueSetter { void setValue(int value); } public class ValueBinder implements TypeBinder&lt;SetValue&gt; { @Override void bind(Object object, ValueSetter annotation, Class&lt;?&gt; annotatedType, Object... parameters) throws BindFailed { \/\/ @SetValue only works with ValueSetter implementations if (object instanceof ValueSetter) { \/\/ Safely convert to ValueSetter ValueSetter value_holder = (ValueSetter)object; \/\/ Set the integer value int value = annotatedClass.getAnnotation().value(); value_holder.setValue(value); } else { throw new BindFailed(&quot;Field is not a ValueSetter&quot;); } } @Override public Class&lt;SetValue&gt; getAnnotationClass() { return SetValue.class; } } Usage: @SetValue(123) class Example implements ValueSetter { private int value; public Example() { Spork.bind(this); \/\/ ensures &quot;123&quot; is set through setValue() } @Override public void setValue(int value) { this.value = value; } } Binder registration Registering new binders must be done before the first call to bind(): Spork.register(new YourAnnotationBinder());","tags":"","url":"Annotation_Development\/Creating_Annotations.html"},{"title":"Feature Comparison","text":"Android Annotations Comparison of libraries that provide bindings for Android. (e.g. binding views to fields.) Spork Android Annotations Butter Knife Code generation (1) x x Inheritance-safe (3) x x Easily extensible (5) x Small library (6) x x Performance (7) lower higher higher Dependency Injection Spork Android Annotations Dagger Code generation (1) x x Inheritance-safe (3) x x DI overridible (4) x x Easily extensible (5) x Small library (6) x x Performance (7) lower higher higher (1) No code generation Libraries that generate code are less predictable at runtime, increase build times and in some cases are more difficult to debug (because you might need to debug the generated code). (2) Android injection Has advanced support for Android for binding Views, Fragments, Clicks and more. (3) Inheritance-safe: Some libraries require you to inherit special classes before its functionality can work. For example RoboActivity with RoboGuice. Forcing to use a custom base class is considered bad practice. (4) DI overridible: Dependency injection can be overriden for testing purposes. (5) Easily extensible: Create new functionality without having to re-build the library. (6) Based on method count and dex: spork: 111 methods, 15kB dex (verify here) spork-android: TBD (includes spork dependency, verify here) spork-inject: 332 methods, 52kB dex (includes spork dependency, verify here) Android Annotations: (excluding generated code!) 6068 methods, 746kB dex (verify here) Butter Knife: (excluding generated code!) 196 methods, 37kB dex (verify here) Dagger: (excluding generated code!) 117 methods, 20kB dex (verify here) RoboGuice: 10280 methods, 1344kB dex (verify here) In reality, Spork will very likely be the smallest one, because no code is generated. (7) Performance: Spork's performance might be lower than code generation solution, but it is still very fast.","tags":"","url":"About\/Feature_Comparison.html"},{"title":"Performance","text":"Performance TL;DR Spork's core binding speed is very fast. Binding a field with warm cache was measured at: about 1 \u00ce\u00bcs on a Nexus 5X about 3 \u00ce\u00bcs on a Nexus 4 (a device from 2012!) about 6 \u00ce\u00bcs on a Wiko Sunset 2 (bought new for 50 euro or less in 2016) Spork Android bindings are expected to be in line with the above measurements. The core binding speed implies that Android View injection can be done very quickly and for many Views that you create on the fly. Spork Dependency Injection is slower, but still very fast. When injecting 5 fields, the duration per field was measured at: 10 \u00ce\u00bcs on a Nexus 5X 34 \u00ce\u00bcs on a Nexus 4 (slower, but this is a &gt; 4.5 year old device after all - and still fast enough for binding Activity\/Fragment\/etc.) 13 \u00ce\u00bcs on a Wiko Sunset 2 (impressive for a such a cheap device from 2 years ago) Spork Dependency Injection is slower, but it is still very fast in absolute terms: unless you're using an ancient device, injecting 5 fields will generally stay well below 100 \u00ce\u00bcs. That means you could inject well over 50k fields\/second on a single core. Using all your CPU power for injection is not a great idea though, so I advise using spork-inject on your main objects including services, view controllers, main views, presenters, and other main objects. Setup Several benchmarks were carefully crafted to test performance. You can find them on GitHub in the support directory. Benchmarks are run on the following devices: LG Nexus 5X with Android 7.1.1 LG Nexus 4 with Android 5.1.1 Wiko Sunset 2 with Android 4.4.2 Duration can be influenced by factors such as garbage collection being triggered during the test. That's why the benchmark was run 3 times on each device and the best measurements can be found below. Core annotation processing speed This part describes Spork core performance: the ability to do runtime anotation processing. Measurements exclude the actual binding implementation like resolving a View from an Object, as the performance of such operations are not determined by Spork itself. Binding 1 field with cold cache: Nexus 5X: 0.065 ms Nexus 4: 0.209 ms Sunset 2: 0.162 ms Binding 1 field with warm cache: Nexus 5X: 0.001 ms Nexus 4: 0.003 ms Sunset 2: 0.006 ms Binding 5 fields with warm cache: Nexus 5X: 0.002 ms Nexus 4: 0.005 ms Sunset 2: 0.008 ms In conclusion, Spork's annotation processing core is extremely fast. The very first (cold cache) bind was done in 0.065 ms to 0.216 ms and a warm cache bind on a single field was done in 0.001 ms to 0.008 ms. Binding 5 fields with a warm cache took between 0.002 ms and 0.009 ms which shows that the cost per extra field is very low. Android annotation processing speed A benchmark with Android bindings wouldn't be of much use, as we would mostly be measuring the performance of methods such as findViewById() and setContentView(). The numbers for the core annotation processing give a decent impression of how fast injection could be with spork-android and spork-android-support. There is definitely a little bit of overhead when, injecting Spork Views\/Fragments\/etc. but this is negligable. Dependency injection speed This part describes the performance of the spork-inject library. Every measurement here includes Spork's core Annotation processing time including the dependency injection implementation's time. Injecting 1 field with warm cache: Nexus 5X: 0.013 ms Nexus 4: 0.036 ms Sunset 2: 0.017 ms Injecting 5 fields with warm cache: Nexus 5X: 0.052 ms Nexus 4: 0.168 ms Sunset 2: 0.064 ms Injecting 1 method with warm cache: Nexus 5X: 0.014 ms Nexus 4: 0.041 ms Sunset 2: 0.022 ms Injecting 5 method with warm cache: Nexus 5X: 0.059 ms Nexus 4: 0.183 ms Sunset 2: 0.092 ms Injecting a mixed object with warm cache: Nexus 5X: 0.038 ms Nexus 4: 0.145 ms Sunset 2: 0.091 ms Dependency injection is pretty fast. It generally took somewhere between 0.010 ms and 0.034 ms per field (when injecting 5) depending on the device. Method injection was a little bit slower at 0.012 ms to 0.036 ms per method (when injecting 5). Field injection seems to be noticably faster than method injection. This is great, considering that field injection is generally the preferred way of injecting anyway.","tags":"","url":"About\/Performance\/index.html"},{"title":"Log for Nexus 4","text":"Specs (full): Released in 2012 Android 5.1.1 2GB RAM Quad-core 1.5 GHz Krait CPU 05-14 14:14:23.486 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldCold: 05-14 14:14:23.486 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:23.486 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.209 ms 05-14 14:14:23.488 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldWarm: 05-14 14:14:23.488 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:23.488 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.004 ms 05-14 14:14:23.491 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreFiveFieldWarm: 05-14 14:14:23.491 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:23.491 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.009 ms 05-14 14:14:23.507 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectOneFieldWarm: 05-14 14:14:23.507 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:23.507 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.057 ms 05-14 14:14:23.554 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectFiveFieldWarm: 05-14 14:14:23.554 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:23.554 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.208 ms 05-14 14:14:23.564 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectOneMethodWarm: 05-14 14:14:23.564 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:23.564 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.041 ms 05-14 14:14:23.619 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectFiveMethodWarm: 05-14 14:14:23.619 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:23.619 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.253 ms 05-14 14:14:23.659 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.complex.InjectComplex: 05-14 14:14:23.659 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:23.659 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.152 ms 05-14 14:14:41.688 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldCold: 05-14 14:14:41.688 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:41.688 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.216 ms 05-14 14:14:41.689 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldWarm: 05-14 14:14:41.689 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:41.689 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.003 ms 05-14 14:14:41.691 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreFiveFieldWarm: 05-14 14:14:41.691 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:41.691 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.005 ms 05-14 14:14:41.700 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectOneFieldWarm: 05-14 14:14:41.700 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:41.700 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.036 ms 05-14 14:14:41.738 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectFiveFieldWarm: 05-14 14:14:41.738 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:41.738 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.168 ms 05-14 14:14:41.747 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectOneMethodWarm: 05-14 14:14:41.747 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:41.747 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.041 ms 05-14 14:14:41.789 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectFiveMethodWarm: 05-14 14:14:41.789 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:41.789 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.183 ms 05-14 14:14:41.825 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.complex.InjectComplex: 05-14 14:14:41.825 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:41.825 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.145 ms 05-14 14:14:54.193 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldCold: 05-14 14:14:54.193 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:54.193 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.214 ms 05-14 14:14:54.195 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldWarm: 05-14 14:14:54.195 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:54.195 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.004 ms 05-14 14:14:54.198 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreFiveFieldWarm: 05-14 14:14:54.198 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:54.198 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.007 ms 05-14 14:14:54.213 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectOneFieldWarm: 05-14 14:14:54.213 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:54.213 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.058 ms 05-14 14:14:54.258 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectFiveFieldWarm: 05-14 14:14:54.258 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:54.258 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.194 ms 05-14 14:14:54.268 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectOneMethodWarm: 05-14 14:14:54.268 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:54.268 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.043 ms 05-14 14:14:54.344 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectFiveMethodWarm: 05-14 14:14:54.344 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:54.344 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.350 ms 05-14 14:14:54.380 17937-17937\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.complex.InjectComplex: 05-14 14:14:54.380 17937-17937\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:14:54.380 17937-17937\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.147 ms","tags":"","url":"About\/Performance\/Log_for_Nexus_4.html"},{"title":"Log for Nexus 5X","text":"Specs (full): Released in 2015 Android 7.1.1 2GB RAM Hexa-core CPU (4x1.4 GHz Cortex-A53 &amp; 2x1.8 GHz Cortex-A57) 05-14 14:11:20.314 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldCold: 05-14 14:11:20.315 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:20.315 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.072 ms 05-14 14:11:20.316 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldWarm: 05-14 14:11:20.316 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:20.316 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.002 ms 05-14 14:11:20.317 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreFiveFieldWarm: 05-14 14:11:20.317 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:20.317 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.002 ms 05-14 14:11:20.324 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectOneFieldWarm: 05-14 14:11:20.324 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:20.324 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.022 ms 05-14 14:11:20.337 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectFiveFieldWarm: 05-14 14:11:20.337 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:20.337 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.052 ms 05-14 14:11:20.342 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectOneMethodWarm: 05-14 14:11:20.342 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:20.342 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.016 ms 05-14 14:11:20.355 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectFiveMethodWarm: 05-14 14:11:20.356 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:20.356 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.059 ms 05-14 14:11:20.366 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.complex.InjectComplex: 05-14 14:11:20.366 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:20.366 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.041 ms 05-14 14:11:29.947 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldCold: 05-14 14:11:29.947 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:29.947 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.065 ms 05-14 14:11:29.948 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldWarm: 05-14 14:11:29.948 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:29.948 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.001 ms 05-14 14:11:29.949 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreFiveFieldWarm: 05-14 14:11:29.950 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:29.950 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.002 ms 05-14 14:11:29.956 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectOneFieldWarm: 05-14 14:11:29.956 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:29.956 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.015 ms 05-14 14:11:29.971 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectFiveFieldWarm: 05-14 14:11:29.971 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:29.971 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.064 ms 05-14 14:11:29.975 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectOneMethodWarm: 05-14 14:11:29.975 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:29.975 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.015 ms 05-14 14:11:29.990 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectFiveMethodWarm: 05-14 14:11:29.990 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:29.990 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.069 ms 05-14 14:11:30.002 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.complex.InjectComplex: 05-14 14:11:30.002 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:11:30.002 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.048 ms 05-14 14:12:11.883 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldCold: 05-14 14:12:11.883 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:12:11.883 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.074 ms 05-14 14:12:11.884 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldWarm: 05-14 14:12:11.884 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:12:11.884 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.001 ms 05-14 14:12:11.885 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreFiveFieldWarm: 05-14 14:12:11.885 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:12:11.885 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.002 ms 05-14 14:12:11.889 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectOneFieldWarm: 05-14 14:12:11.889 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:12:11.889 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.013 ms 05-14 14:12:11.903 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectFiveFieldWarm: 05-14 14:12:11.904 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:12:11.904 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.058 ms 05-14 14:12:11.907 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectOneMethodWarm: 05-14 14:12:11.907 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:12:11.907 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.014 ms 05-14 14:12:11.921 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectFiveMethodWarm: 05-14 14:12:11.921 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:12:11.921 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.063 ms 05-14 14:12:11.931 9013-9013\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.complex.InjectComplex: 05-14 14:12:11.931 9013-9013\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:12:11.931 9013-9013\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.038 ms","tags":"","url":"About\/Performance\/Log_for_Nexus_5X.html"},{"title":"Log for Wiko Sunset 2","text":"Specs (full): Released in 2015 Android 4.4.2 512MB RAM Dual-core 1.3 GHz Cortex-A7 CPU 05-14 14:08:49.441 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldCold: 05-14 14:08:49.441 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:08:49.441 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.162 ms 05-14 14:08:49.444 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldWarm: 05-14 14:08:49.444 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:08:49.444 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.008 ms 05-14 14:08:49.447 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreFiveFieldWarm: 05-14 14:08:49.447 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:08:49.447 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.008 ms 05-14 14:08:49.454 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectOneFieldWarm: 05-14 14:08:49.454 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:08:49.454 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.022 ms 05-14 14:08:49.476 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectFiveFieldWarm: 05-14 14:08:49.476 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:08:49.476 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.100 ms 05-14 14:08:49.488 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectOneMethodWarm: 05-14 14:08:49.488 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:08:49.488 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.048 ms 05-14 14:08:49.529 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectFiveMethodWarm: 05-14 14:08:49.529 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:08:49.529 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.182 ms 05-14 14:08:49.552 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.complex.InjectComplex: 05-14 14:08:49.552 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:08:49.552 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.091 ms 05-14 14:09:13.388 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldCold: 05-14 14:09:13.388 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:13.389 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.207 ms 05-14 14:09:13.391 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldWarm: 05-14 14:09:13.392 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:13.392 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.006 ms 05-14 14:09:13.395 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreFiveFieldWarm: 05-14 14:09:13.395 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:13.395 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.009 ms 05-14 14:09:13.401 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectOneFieldWarm: 05-14 14:09:13.401 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:13.402 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.017 ms 05-14 14:09:13.417 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectFiveFieldWarm: 05-14 14:09:13.417 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:13.418 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.064 ms 05-14 14:09:13.424 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectOneMethodWarm: 05-14 14:09:13.424 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:13.425 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.022 ms 05-14 14:09:13.446 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectFiveMethodWarm: 05-14 14:09:13.446 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:13.447 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.092 ms 05-14 14:09:13.470 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.complex.InjectComplex: 05-14 14:09:13.470 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:13.471 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.092 ms 05-14 14:09:48.106 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldCold: 05-14 14:09:48.106 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:48.107 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.181 ms 05-14 14:09:48.109 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreOneFieldWarm: 05-14 14:09:48.110 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:48.110 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.006 ms 05-14 14:09:48.113 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.core.CoreFiveFieldWarm: 05-14 14:09:48.113 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:48.114 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.008 ms 05-14 14:09:48.119 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectOneFieldWarm: 05-14 14:09:48.119 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:48.119 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.017 ms 05-14 14:09:48.136 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.field.InjectFiveFieldWarm: 05-14 14:09:48.136 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:48.137 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.072 ms 05-14 14:09:48.144 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectOneMethodWarm: 05-14 14:09:48.144 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:48.144 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.025 ms 05-14 14:09:48.166 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.method.InjectFiveMethodWarm: 05-14 14:09:48.166 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:48.167 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.096 ms 05-14 14:09:48.194 7873-7873\/spork.benchmark.android I\/System.out: Ran benchmark spork.benchmark.inject.complex.InjectComplex: 05-14 14:09:48.199 7873-7873\/spork.benchmark.android I\/System.out: - work items: 200 05-14 14:09:48.199 7873-7873\/spork.benchmark.android I\/System.out: - avg. time\/item: 0.119 ms","tags":"","url":"About\/Performance\/Log_for_Wiko_Sunset_2.html"}]}