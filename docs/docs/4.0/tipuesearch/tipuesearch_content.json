{"pages":[{"title":"Spork 4.0 Documentation","text":"Getting started on Android WARNING: Spork 4.0 is only accessible as a snapshot release.This is not a final release and is subject to potential changes in its API. Add the following dependencies in build.gradle: repositories { maven { url &quot;http:\/\/dl.bintray.com\/bytewelder\/maven-snapshot&quot; } } dependencies { \/\/ Spork Dependency Injection compile 'com.bytewelder.spork:spork-inject:4.0.0' \/\/ Spork for Android (pick one of the dependencies below) compile 'com.bytewelder.spork:spork-android:4.0.0@aar' compile 'com.bytewelder.spork:spork-android-support:4.0.0@aar' } Getting started on Java Add the following dependencies in build.gradle: dependencies { compile 'com.bytewelder.spork:spork-inject:4.0.0' } All dependencies are available at Maven Central Repository. Migrating from 3.x to 4.0: repository is moved to jCenter with snapshots at http:\/\/dl.bintray.com\/bytewelder\/maven-snapshot base packages renamed from io.github.sporklibrary to spork @BindComponent is now @Inject and injection is done with dependencies defined by an ObjectGraph and its modules. @ComponentScope(Scope.SINGLETON) is now @Singleton removed custom support for RecyclerView.ViewHolder as you can now make it implement ViewProvider FieldBinder, MethodBinder and TypeBinder interfaces are changed","tags":"","url":"index.html"},{"title":"Android","text":"Spork for Android Spork for Android has 2 packages: spork-android which provides all basic Android injection spork-android-support which provides injection for android.support.v4.app.Fragment Dependencies Add the following dependencies in build.gradle: repositories { jcenter() } dependencies { \/\/ Spork for Android (pick one of the dependencies below) compile 'com.bytewelder.spork:spork-android:4.0.0@aar' compile 'com.bytewelder.spork:spork-android-support:4.0.0@aar' }","tags":"","url":"Android\/index.html"},{"title":"BindClick","text":"@BindClick This annotation can be used with classes inheriting\/implementing: android.app.Activity android.app.Fragment android.support.v4.app.Fragment (with the spork-android-support dependency) android.view.View spork.android.ViewProvider You can specify the view id as the annotation value: @BindClick(R.id.download_button) private void onClickDownload() { } Alternatively, you can imply the view id by the method name: @BindClick private void download_button() { } You can also pass the any compatible View instance as method argument: @BindClick(R.id.download_button) private void onClickDownload(Button button) { }","tags":"","url":"Android\/Annotations\/BindClick.html"},{"title":"BindFragment","text":"@BindFragment This annotation can be used with classes derived from: android.app.Activity android.app.Fragment android.support.v4.app.Fragment (with the spork-android-support dependency) You can bind a fragment by specifying its id: @BindFragment(R.id.my_fragment) private Fragment myFragment; Alternatively, you can imply the fragment id by the field name: @BindFragment private Fragment my_fragment;","tags":"","url":"Android\/Annotations\/BindFragment.html"},{"title":"BindLayout","text":"@BindLayout This annotation can be used with classes inheriting: android.app.Activity android.view.ViewGroup When using it for ViewGroup, a FrameLayout is preferred as the inflated layout will be added as a child to it. Example: Activity @BindLayout(R.layout.activity_custom) public class CustomActivity extends Activity { @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Spork.bind(this); } } Example: ViewGroup @BindLayout(R.layout.view_custom) public class CustomView extends FrameLayout { public MyView(Context context) { super(context); Spork.bind(this); } }","tags":"","url":"Android\/Annotations\/BindLayout.html"},{"title":"BindResource","text":"@BindResoure This annotation can be used with classes inheriting\/implementing: android.app.Activity android.app.Application android.app.Fragment android.app.Service android.content.ContentProvider android.support.v4.app.Fragment (with the spork-android-support dependency) android.view.View spork.android.ContextProvider spork.android.ViewProvider It can bind: R.dimen.* to Float or float fields R.string.* to String fields R.integer.* to Integer and int fields R.bool.* to Boolean and boolean fields R.drawable.* to Drawable fields You can bind a resource by specifying its id: @BindResource(R.string.app_name) private String appName; Alternatively, you can imply the view id by the field name: @BindResource private String app_name; Example public class MyActivity extends Activity { @BindResource(R.string.app_name) private String appName; @BindResource private String app_name; @BindResource(R.dimen.spork_test_dimension) private float sporkTestDimension; @BindResource private Float spork_test_dimension; @BindResource(R.drawable.spork_test_drawable) private Drawable sporkTestDrawable; @BindResource private Drawable spork_test_drawable; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Spork.bind(this); } }","tags":"","url":"Android\/Annotations\/BindResource.html"},{"title":"BindView","text":"@BindView This annotation can be used with classes inheriting\/implementing: android.app.Activity android.app.Fragment android.support.v4.app.Fragment (with the spork-android-support dependency) android.view.View spork.android.ViewProvider You can bind a view by specifying its id: @BindView(R.id.my_button) private Button button; Alternatively, you can imply the view id by the field name: @BindView private Button my_button;","tags":"","url":"Android\/Annotations\/BindView.html"},{"title":"Activity","text":"Activity Introduction The following annotations are supported: @BindClick @BindView @BindLayout @BindResource @BindFragment Example @BindLayout(R.layout.activity_download) public class DownloadActivity extends Activity { @BindView(R.id.download_button) private Button downloadButton; @BindFragment(R.id.details_fragment) private DetailsFragment fragment; public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Spork.bind(this); } @BindClick(R.id.other_button) private void onClickButton(Button someButton) { downloadManager.startDownload(); } }","tags":"","url":"Android\/Examples\/Activity.html"},{"title":"Application","text":"Application Introduction The following annotations are supported: @BindResource Example public class MyApplication extends android.app.Application { @BindResource(R.string.app_name) private String appName; @Override public void onCreate() { super.onCreate(); Spork.bind(this); } }","tags":"","url":"Android\/Examples\/Application.html"},{"title":"ContentProvider","text":"ContentProvider Introduction The following annotations are supported: @BindResource Example public class CustomContentProvider extends ContentProvider { @BindResource(R.string.helloworld) private String helloWorld; @Override public boolean onCreate() { Spork.bind(this); return true; } \/\/ ContentProvider methods }","tags":"","url":"Android\/Examples\/ContentProvider.html"},{"title":"Fragment","text":"Fragment Introduction You can also use android.support.v4.app.Fragment if you add the spork-android-support dependency. The following annotations are supported: @BindClick @BindView @BindResource @BindFragment @Inject Example public class MyFragment extends Fragment { @BindView(R.id.some_textview) private TextView myTextView; @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_click_binding, container); } @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { Spork.bind(this); } @BindClick(R.id.some_button) private void onClick() { \/\/ click-handling code goes here } }","tags":"","url":"Android\/Examples\/Fragment.html"},{"title":"RecyclerView","text":"RecyclerView Introduction To bind RecyclerView views, you need to make RecyclerView.ViewHolder implement spork.android.ViewProvider. The following annotations are supported: @BindView @BindClick @BindResource Example public class MyAdapter extends RecyclerView.Adapter&lt;MyAdapter.MyViewHolder&gt; { private final List&lt;String&gt; items; public MyAdapter(List&lt;String&gt; items) { this.items = items; } public class MyViewHolder extends RecyclerView.ViewHolder implements ViewProvider { @BindView(R.id.textview) private TextView textView; public MyViewHolder(View itemView) { super(itemView); Spork.bind(this); } public void update(String text) { textView.setText(text); } @BindClick(R.id.textview) private void onClick() { \/\/ ... } @Override public View getView() { return itemView; } } @Override public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { LayoutInflater inflater = LayoutInflater.from(parent.getContext()); View view = inflater.inflate(R.layout.view_recyclerview_item, parent, false); return new MyViewHolder(view); } @Override public void onBindViewHolder(MyViewHolder holder, int position) { String item = items.get(position); holder.update(item); } @Override public int getItemCount() { return items.size(); } }","tags":"","url":"Android\/Examples\/RecyclerView.html"},{"title":"Service","text":"Service Introduction The following annotations are supported: @BindResource Example public class TestService extends Service { @BindResource(R.string.helloworld) private String helloWorld; public class LocalBinder extends Binder { public TestService getLocalService() { return TestService.this; } } @Override public void onCreate() { super.onCreate(); Spork.bind(this); } @Override public @Nullable IBinder onBind(Intent intent) { return new LocalBinder(); } }","tags":"","url":"Android\/Examples\/Service.html"},{"title":"View","text":"View Introduction When creating a custom view, it's best to extend a FrameLayout, because @BindLayout will inflate the specified layout into it. The following annotations are supported: @BindClick @BindView @BindLayout @BindResource Example @BindLayout(R.layout.view_layout_binding) public class MyView extends FrameLayout { (R.id.textview) private TextView textView; public MyView(Context context) { super(context); \/\/ Note: Spork.bind() must be called in \/\/ all constructors that are implemented! Spork.bind(this); } @BindClick(R.id.button_one) private void onClickDownload() { \/\/ ... } \/\/ BindClick can also pass the button that was clicked @BindClick(R.id.button_two) private void onClickOtherButton(Button otherButton) { \/\/ ... } }","tags":"","url":"Android\/Examples\/View.html"},{"title":"ProGuard","text":"ProGuard &amp; DexGuard When using spork-android or spork-android-support, your ProGuard configurations are provided by the library. When using spork-inject, you should manually configure ProGuard\/DexGuard for the injectable classes. For example: -keep class com.yourapp.modules.** { *; } -keep interface com.yourapp.interfaces.** { *; }","tags":"","url":"Android\/ProGuard.html"},{"title":"Dependency Injection","text":"Spork Inject Spork Inject is a runtime dependency injection framework for Java and Android. It is almost fully compatible with Dagger and is modeled on the JSR-330 specification. Dependencies Add the following dependencies in build.gradle: repositories { jcenter() } dependencies { compile 'com.bytewelder.spork:spork-inject:4.0.0' } Example public static class Module { @Provides public Integer provideNumber() { return 1; } @Provides @Named(&quot;color&quot;) public String provideColor() { return &quot;red&quot;; } @Provides @Named(&quot;label&quot;) public String provideLabel() { return &quot;Hi!&quot;; } @Provides @Singleton public RestService provideRestService(HttpService service) { return new RestServiceImpl(service); } @Provides @Singleton public HttpService provideHttpService() { return new HttpServiceImpl(service); } } private static class Parent { @Inject private Integer number; @Inject @Named(&quot;color&quot;) private String color; @Inject @Named(&quot;label&quot;) private String label; @Inject private RestService restService; public Parent() { ObjectGraphs.builder() .module(new Module()) .build() .inject(this); } }","tags":"","url":"Dependency_Injection\/index.html"},{"title":"User Guide","text":"User Guide Using Spork Inject Spork creates instances of your classes and satisfies their dependencies. It uses the javax.inject.Inject annotation to identify which constructors and fields it is interested in. Use the ObjectGraph.bind() method in a constructor or initialization method to wire up all dependencies. When a new instance is requested, Spork will obtain the required parameters values and invoke its constructor. When bind() is called on an ObjectGraph, any other registered Spork binding (e.g. @BindView) is also resolved. class CoffeeMug { private Coffee coffee; private Mug mug; CoffeeMug(Coffee coffee, Mug mug) { this.coffee = coffee; this.mug = mug; } } Spork can inject fields directly. In this example it obtains an Coffee and a Mug instance for the respective fields: class CoffeeMug { @Inject private Coffee coffee; @Inject private Mug mug; ... } Spork also supports method injection, but Field injection is generally preferred. Declaring Dependencies In the above sample, an Coffee and Mug are injected. Of course these dependencies must come from somewhere. Dependencies should be defined in a Module as follows: @Provides public Coffee provideCoffee() { return new BlackCoffee(); } It's possible for a @Provides method to require dependencies on its own: @Provides public Coffee provideCoffee(Water water, CoffeeBeans beans) { return new BlackCoffee(water, beans); } @Provides public Mug provideMug() { return new MugWithPrint(&quot;Input Java, output Java.&quot;); } Modules The @Provides-annotated methods above are placed in a Module. Modules are POJO objects that define a set of dependencies: class BrewModule { @Provides public Coffee provideCoffee(Water water, CoffeeBeans beans) { return new BlackCoffee(water, beans); } @Provides public Mug provideMug() { return new MugWithPrint(&quot;Input Java, output Java.&quot;); } @Provides public Water provideWater() { return new BoilingWater(); } @Provides public Beans provideBeans() { return new ArabicaBeans(); } } Building an ObjectGraph A module is used to build an object graph. Object graphs hold state such as your singletons and named instances. Creating an ObjectGraph is easy: ObjectGraph objectGraph = ObjectGraphs.builder() .module(new BrewModule()) .build(); When putting it all together, the CoffeeMug from the sample above could be injected as follows: class CoffeeMug { @Inject private Coffee coffee; @Inject private Mug mug; public CoffeeMug() { ObjectGraphs.builder() .module(new BrewModule()) .build() .inject(this); \/\/ same as Spork.inject(this, objectGraph) } } ObjectGraph with parent An object graph can have a parent object graph: ObjectGraph objectGraph = ObjectGraphs.builder(applicationObjectGraph) .module(new BrewModule()) .build(); This way, it can resolve dependencies from its parent and from the BrewModule. An ObjectGraph's modules can override the dependencies of the parent as long as the injection signature is an exact match: its type, qualifier and nullability must match. Scoped injection A scoped instance is an instance that belongs to an ObjectGraph created at a specific level of the application. It is tied to the lifecycle of that ObjectGraph. Singleton is a predefined scope that is always available at the root ObjectGraph in your application. It is tied to the lifecycle of that ObjectGraph. @Provides methods in a module can specify a scope. It can be used like this: @Provides @Singleton CoffeeService provideCoffeeService() { return new CoffeeServiceImpl(); } You can also create custom scopes, which can look like this: @Provides @LocationScope(AMSTERDAM) CoffeeService provideCoffeeService() { return new CoffeeServiceImpl(); } In this case, the Service is bound to the lifecycle of the ObjectGraph that defines the LocationScope. Lazy injection Instead of injecting an instance directly, they can also injected on a Lazy&lt;T&gt; field. When get() is called on the Lazy field, it will retrieve the injected instance from the module. Calling get() multiple times will return the same instances every time. class Programmer { @Inject private Lazy&lt;CoffeeMug&gt; coffeeMug; public Programmer() { ... drink(coffeeMug.get()); } } Provider injection A Provider&lt;T&gt; is similar to a Lazy&lt;T&gt; field, but injects a new instance every time it is called. Injecting Provider&lt;T&gt; is generally not advised. You might want to use the factory pattern instead or re-organize your logic and use a Lazy&lt;T&gt; field instead. class Programmer { @Inject private Provider&lt;CoffeeMug&gt; coffeeMug; public Programmer() { ... drink(coffeeMug.get()); } } Qualifiers Sometimes it is not sufficient to bind by type alone. In such cases, you might want to identify an injection by some kind of identifier. In such cases, you can define a new annotation and add to it a @Qualifier annotation. Named The @Named annotation is one that is available by default: @Qualifier @Documented @Retention(RUNTIME) public @interface Named { String value() default &quot;&quot;; } A module is then available to provide named injections: class WaterModule { @Provides @Named(&quot;cold&quot;) public Water provideColdWater() { ... } @Provides @Named(&quot;hot&quot;) public Water provideHotWater() { ... } } This module can then be used to inject a Faucet class: class Faucet { @Inject @Named(&quot;cold&quot;) Water coldWater; @Inject @Named(&quot;hot&quot;) Water hotWater; ... } Custom qualifiers You can also define your own qualifiers. For example: @Qualifier @Retention(RUNTIME) public @interface Colored { } Using a value() method is also supported: @Qualifier @Retention(RUNTIME) public @interface Colored { Color value() default Color.WHITE; } The output of value() is used to create a unique identifier. This is done internally by calling toString() on Color. Adding spork to your project repositories { jcenter() } dependencies { compile 'com.bytewelder.spork:spork-inject:4.0.0' } Note: Before release, spork-inject is available at maven repository http:\/\/dl.bintray.com\/bytewelder\/maven-snapshot License Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http:\/\/www.apache.org\/licenses\/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","tags":"","url":"Dependency_Injection\/User_Guide.html"},{"title":"Custom Scopes","text":"Scopes can be custom-made. Firstly you need to define the annotation for your scope: @Scope @Retention(RetentionPolicy.RUNTIME) private @interface SessionScope { } The root ObjectGraph will always automatically define the Singleton scope, as the root ObjectGraph will contain all singleton instances. Let's consider these classes: Application: Main application instance, injected by ApplicationModule Session: A session started in the application, injected by SessionModule Screen: A view controller that exists in the Session's scope, injected by ScreenModule For this we need to define some modules: class ApplicationModule { ... } class SessionModule { static final AtomicInteger counter = new AtomicInteger(); @Provides @SessionScope public Integer provideSessionId() { return counter.incrementAndGet(); } } class ScreenModule { ... } These are some classes that could be injected by the above modules: private static class Application { final ObjectGraph appGraph; ... public Application() { appGraph = ObjectGraphs.builder() .module(new ApplicationModule()) .build(); appGraph.inject(this); } } private static class Session { final ObjectGraph sessionGraph; @Inject Integer sessionId; \/\/ create an ObjectGraph based on AppGraph, using SessionScope as scope public Session(ObjectGraph appGraph) { ObjectGraph sessionGraph = ObjectGraphs.builder() .scope(SessionScope.class) .module(new SessionModule()) .build(); sessionGraph.inject(this); } } private static class Screen { final ObjectGraph screenGraph; @Inject Integer sessionId; public Screen(ObjectGraph sessionGraph) { screenGraph = ObjectGraphs.builder() .module(new ScreenModule()) .build(); screenGraph.inject(this) } public Integer getSessionId() { return sessionId; } } The Screen is now bound to a Session. Any newly created Screen that is started with the same ObjectGraph from the created Session will share its SessionScope instances.","tags":"","url":"Dependency_Injection\/Custom_Scopes.html"},{"title":"Migrating from Dagger","text":"Migrating from Dagger These are the main differences between Dagger and Spork: Components are replaced by ObjectGraph and also depends on module classes Provides and Lazy classes are in the spork.inject package No need to annotate your module classes with @Module Spork is able to inject private fields and methods Dagger annotations that Spork doesn't support (yet): @Reusable @ForReleasableReferences @BindsOptionalOf","tags":"","url":"Dependency_Injection\/Migrating_from_Dagger.html"},{"title":"Annotation Development","text":"Spork Core Spork Core contains the basic building blocks where the other Spork libraries are built upon. It is provides annotation processing interfaces for classes(&quot;types&quot;), fields and methods. Dependencies Add the following dependencies in build.gradle: repositories { jcenter() } dependencies { compile 'com.bytewelder.spork:spork:4.0.0' }","tags":"","url":"Annotation_Development\/index.html"},{"title":"Creating Annotations","text":"Creating Annotations Overview Spork annotations are bound through one or more of: MethodBinder FieldBinder TypeBinder These binders are registered with Spork.register() FieldBinder FieldBinders are used for annotations that target ElementType.FIELD. Example public class BindViewBinder implements FieldBinder&lt;BindView&gt; { @Override public void bind(Object object, BindView annotation, Field field, Object... parameters) { if (!View.class.isAssignableFrom(field.getType())) { throw new BindFailed(...); } View view = Views.getView(viewResolver, annotation.value(), field.getName(), object); Reflection.setFieldValue(annotation, field, object, view); } @Override public Class&lt;BindView&gt; getAnnotationClass() { return BindView.class; } } MethodBinder MethodBinders are used for annotations that target ElementType.METHOD. Example public class BindClickBinder implements MethodBinder&lt;BindClick&gt; { @Override public void bind(Object object, BindClick annotation, Method method, Object... parameters) { View view = Views.getView(viewResolver, annotation.value(), method.getName(), object); view.setOnClickListener(new OnClickListener() { \/\/ ... }); } @Override public Class&lt;BindClick&gt; getAnnotationClass() { return BindClick.class; } } TypeBinder TypeBinders are used for annotations that target ElementType.TYPE. Example @Target({ ElementType.TYPE }) @Retention(RetentionPolicy.RUNTIME) public @interface SetValue { int value(); } public interface ValueSetter { void setValue(int value); } public class ValueBinder implements TypeBinder&lt;SetValue&gt; { @Override void bind(Object object, ValueSetter annotation, Class&lt;?&gt; annotatedType, Object... parameters) { \/\/ @SetValue only works with ValueSetter implementations if (object instanceof ValueSetter) { \/\/ Safely convert to ValueSetter ValueSetter value_holder = (ValueSetter)object; \/\/ Set the integer value int value = annotatedClass.getAnnotation().value(); value_holder.setValue(value); } else { throw new BindFailed(...); } } @Override public Class&lt;SetValue&gt; getAnnotationClass() { return SetValue.class; } } Usage: @SetValue(123) class Example implements ValueSetter { private int value; public Example() { Spork.bind(this); \/\/ ensures &quot;123&quot; is set through setValue() } @Override public void setValue(int value) { this.value = value; } } Binder registration Registering new binders must be done before the first call to bind(). Registration is done as follows: Spork.register(new YourAnnotationBinder());","tags":"","url":"Annotation_Development\/Creating_Annotations.html"},{"title":"Performance","text":"Performance Setup For this setup, a set of benchmarks are created. You can find them on GitHub in the support directory of the project. The benchmarks are created carefully to measure the right things. There are generally two kinds of benchmarks involved: cold cache benchmarks (contains 100 repetitions of cold cache scenario) warm cache benchmarks (contains 1000 repetitions of warm cache scenario, but starts off with cold cache) Each benchmark is then repeated 10 times and outputs are averages over those repetitions. Benchmarks are run on the following devices: Nexus 5X: Nexus 5X with Android 7.1.1 Nexus 4: Nexus 4 with Android 5.1.1 Sunset 2: Wiko Sunset 2 with Android 4.4.2 Core annotation processing speed This part describes Spork core performance: the ability to do runtime anotation processing. Measurements exclude the actual binding implementation like resolving a View from an Object, as the performance of such operations are not determined by Spork itself. Binding 1 field with cold cache: Nexus 5X: 0.053 to 0.085 ms Nexus 4: 0.146 to 0.191 ms Sunset 2: 0.327 to 0.408 ms Binding 1 field with warm cache: Nexus 5X: &lt; 0.001 to 0.002ms Nexus 4: 0.003 to 0.004 ms Sunset 2: 0.007 to 0.011 ms Binding 5 fields with warm cache: Nexus 5X: &lt; 0.001 to 0.002 ms Nexus 4: 0.005 ms Sunset 2: 0.010 to 0.013 ms In conclusion, Spork's annotation processing core is extremely fast. The very first (cold cache) bind was done in 0.053 to 0.408 ms and a warm cache bind on a single field was done in 0.001 ms to 0.011 ms. Binding 5 fields with a warm cache increases binding time only with a few microseconds. Dependency injection speed This part describes the performance of the spork-inject library. Every measurement here includes Spork's core Annotation processing time including the dependency injection implementation's time. Injecting 1 field with cold cache: Nexus 5X: 0.086 to 0.108 ms Nexus 4: 0.577 to 0.608 ms Sunset 2: 0.335 to 0.558 ms Injecting 1 field with warm cache: Nexus 5X: 0.008 to 0.010 ms Nexus 4: 0.047 to 0.057 ms Sunset 2: 0.023 ms Injecting 5 fields with warm cache: Nexus 5X: 0.038 ms Nexus 4: 0.206 to 0.234 ms Sunset 2: 0.078 to 0.079 ms Injecting 1 method with cold cache: Nexus 5X: 0.069 to 0.088 ms Nexus 4: 0.240 to 0.259 ms Sunset 2: 0.195 to 0.197 ms Injecting 1 method with warm cache: Nexus 5X: 0.012 ms Nexus 4: 0.059 to 0.065 ms Sunset 2: 0.029 to 0.031 ms Injecting 5 method with warm cache: Nexus 5X: 0.063 to 0.065 ms Nexus 4: 0.262 to 0.288 ms Sunset 2: 0.119 to 0.126 ms Injecting a mixed object with warm cache: Nexus 5X: 0.046 ms Nexus 4: 0.176 to 0.196 ms Sunset 2: 0.115 to 0.123 ms In conclusion, injection is pretty fast: they take somewhere between 8 and 60 microseconds per field or method depending on the device. Injecting 5 fields on a single object will generally be done in less than 0.1 millisecond - and on slow devices in about 0.2 milliseconds.","tags":"","url":"About\/Performance\/index.html"},{"title":"Log for Nexus 4","text":"Specs (full): Released in 2012 Android 5.1.1 2GB RAM Quad-core 1.5 GHz Krait CPU 05-04 21:12:32.874 Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-04 21:12:32.874 - benchmark repeat: 100 time(s) 05-04 21:12:32.874 - work items: 1 per benchmark 05-04 21:12:32.874 - work item time: 0.191ms average 05-04 21:12:32.918 Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-04 21:12:32.918 - benchmark repeat: 10 time(s) 05-04 21:12:32.918 - work items: 1000 per benchmark 05-04 21:12:32.918 - work item time: 0.004ms average 05-04 21:12:32.975 Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-04 21:12:32.975 - benchmark repeat: 10 time(s) 05-04 21:12:32.975 - work items: 1000 per benchmark 05-04 21:12:32.976 - work item time: 0.005ms average 05-04 21:12:33.145 Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-04 21:12:33.145 - benchmark repeat: 100 time(s) 05-04 21:12:33.145 - work items: 1 per benchmark 05-04 21:12:33.145 - work item time: 0.577ms average 05-04 21:12:33.734 Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-04 21:12:33.734 - benchmark repeat: 10 time(s) 05-04 21:12:33.734 - work items: 1000 per benchmark 05-04 21:12:33.734 - work item time: 0.057ms average 05-04 21:12:36.099 Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-04 21:12:36.099 - benchmark repeat: 10 time(s) 05-04 21:12:36.100 - work items: 1000 per benchmark 05-04 21:12:36.100 - work item time: 0.234ms average 05-04 21:12:36.226 Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-04 21:12:36.226 - benchmark repeat: 100 time(s) 05-04 21:12:36.226 - work items: 1 per benchmark 05-04 21:12:36.226 - work item time: 0.240ms average 05-04 21:12:36.835 Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-04 21:12:36.835 - benchmark repeat: 10 time(s) 05-04 21:12:36.835 - work items: 1000 per benchmark 05-04 21:12:36.835 - work item time: 0.059ms average 05-04 21:12:39.764 Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-04 21:12:39.764 - benchmark repeat: 10 time(s) 05-04 21:12:39.764 - work items: 1000 per benchmark 05-04 21:12:39.764 - work item time: 0.288ms average 05-04 21:12:41.791 Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-04 21:12:41.792 - benchmark repeat: 10 time(s) 05-04 21:12:41.792 - work items: 1000 per benchmark 05-04 21:12:41.792 - work item time: 0.196ms average 05-04 21:13:04.644 Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-04 21:13:04.644 - benchmark repeat: 100 time(s) 05-04 21:13:04.644 - work items: 1 per benchmark 05-04 21:13:04.644 - work item time: 0.146ms average 05-04 21:13:04.687 Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-04 21:13:04.687 - benchmark repeat: 10 time(s) 05-04 21:13:04.687 - work items: 1000 per benchmark 05-04 21:13:04.687 - work item time: 0.003ms average 05-04 21:13:04.745 Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-04 21:13:04.745 - benchmark repeat: 10 time(s) 05-04 21:13:04.745 - work items: 1000 per benchmark 05-04 21:13:04.745 - work item time: 0.005ms average 05-04 21:13:04.919 Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-04 21:13:04.919 - benchmark repeat: 100 time(s) 05-04 21:13:04.919 - work items: 1 per benchmark 05-04 21:13:04.919 - work item time: 0.594ms average 05-04 21:13:05.415 Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-04 21:13:05.415 - benchmark repeat: 10 time(s) 05-04 21:13:05.416 - work items: 1000 per benchmark 05-04 21:13:05.416 - work item time: 0.048ms average 05-04 21:13:07.526 Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-04 21:13:07.526 - benchmark repeat: 10 time(s) 05-04 21:13:07.526 - work items: 1000 per benchmark 05-04 21:13:07.526 - work item time: 0.209ms average 05-04 21:13:07.656 Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-04 21:13:07.656 - benchmark repeat: 100 time(s) 05-04 21:13:07.656 - work items: 1 per benchmark 05-04 21:13:07.656 - work item time: 0.256ms average 05-04 21:13:08.285 Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-04 21:13:08.285 - benchmark repeat: 10 time(s) 05-04 21:13:08.285 - work items: 1000 per benchmark 05-04 21:13:08.285 - work item time: 0.061ms average 05-04 21:13:10.953 Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-04 21:13:10.953 - benchmark repeat: 10 time(s) 05-04 21:13:10.953 - work items: 1000 per benchmark 05-04 21:13:10.953 - work item time: 0.262ms average 05-04 21:13:12.778 Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-04 21:13:12.778 - benchmark repeat: 10 time(s) 05-04 21:13:12.778 - work items: 1000 per benchmark 05-04 21:13:12.778 - work item time: 0.176ms average 05-04 21:14:19.282 Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-04 21:14:19.282 - benchmark repeat: 100 time(s) 05-04 21:14:19.283 - work items: 1 per benchmark 05-04 21:14:19.283 - work item time: 0.161ms average 05-04 21:14:19.319 Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-04 21:14:19.319 - benchmark repeat: 10 time(s) 05-04 21:14:19.319 - work items: 1000 per benchmark 05-04 21:14:19.319 - work item time: 0.003ms average 05-04 21:14:19.381 Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-04 21:14:19.381 - benchmark repeat: 10 time(s) 05-04 21:14:19.381 - work items: 1000 per benchmark 05-04 21:14:19.382 - work item time: 0.005ms average 05-04 21:14:19.550 Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-04 21:14:19.550 - benchmark repeat: 100 time(s) 05-04 21:14:19.550 - work items: 1 per benchmark 05-04 21:14:19.550 - work item time: 0.608ms average 05-04 21:14:20.038 Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-04 21:14:20.038 - benchmark repeat: 10 time(s) 05-04 21:14:20.038 - work items: 1000 per benchmark 05-04 21:14:20.038 - work item time: 0.047ms average 05-04 21:14:22.122 Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-04 21:14:22.122 - benchmark repeat: 10 time(s) 05-04 21:14:22.122 - work items: 1000 per benchmark 05-04 21:14:22.122 - work item time: 0.206ms average 05-04 21:14:22.259 Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-04 21:14:22.259 - benchmark repeat: 100 time(s) 05-04 21:14:22.259 - work items: 1 per benchmark 05-04 21:14:22.259 - work item time: 0.259ms average 05-04 21:14:22.933 Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-04 21:14:22.933 - benchmark repeat: 10 time(s) 05-04 21:14:22.933 - work items: 1000 per benchmark 05-04 21:14:22.933 - work item time: 0.065ms average 05-04 21:14:25.862 Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-04 21:14:25.862 - benchmark repeat: 10 time(s) 05-04 21:14:25.862 - work items: 1000 per benchmark 05-04 21:14:25.862 - work item time: 0.288ms average 05-04 21:14:27.758 Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-04 21:14:27.758 - benchmark repeat: 10 time(s) 05-04 21:14:27.758 - work items: 1000 per benchmark 05-04 21:14:27.758 - work item time: 0.184ms average","tags":"","url":"About\/Performance\/Log_for_Nexus_4.html"},{"title":"Log for Nexus 5X","text":"Specs (full): Released in 2015 Android 7.1.1 2GB RAM Hexa-core CPU (4x1.4 GHz Cortex-A53 &amp; 2x1.8 GHz Cortex-A57) 05-04 21:18:44.078 Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-04 21:18:44.078 - benchmark repeat: 100 time(s) 05-04 21:18:44.078 - work items: 1 per benchmark 05-04 21:18:44.078 - work item time: 0.085ms average 05-04 21:18:44.092 Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-04 21:18:44.092 - benchmark repeat: 10 time(s) 05-04 21:18:44.092 - work items: 1000 per benchmark 05-04 21:18:44.092 - work item time: 0.001ms average 05-04 21:18:44.108 Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-04 21:18:44.108 - benchmark repeat: 10 time(s) 05-04 21:18:44.108 - work items: 1000 per benchmark 05-04 21:18:44.108 - work item time: 0.001ms average 05-04 21:18:44.143 Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-04 21:18:44.143 - benchmark repeat: 100 time(s) 05-04 21:18:44.143 - work items: 1 per benchmark 05-04 21:18:44.143 - work item time: 0.108ms average 05-04 21:18:44.243 Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-04 21:18:44.243 - benchmark repeat: 10 time(s) 05-04 21:18:44.243 - work items: 1000 per benchmark 05-04 21:18:44.243 - work item time: 0.010ms average 05-04 21:18:44.624 Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-04 21:18:44.624 - benchmark repeat: 10 time(s) 05-04 21:18:44.624 - work items: 1000 per benchmark 05-04 21:18:44.624 - work item time: 0.038ms average 05-04 21:18:44.657 Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-04 21:18:44.657 - benchmark repeat: 100 time(s) 05-04 21:18:44.657 - work items: 1 per benchmark 05-04 21:18:44.657 - work item time: 0.088ms average 05-04 21:18:44.784 Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-04 21:18:44.784 - benchmark repeat: 10 time(s) 05-04 21:18:44.784 - work items: 1000 per benchmark 05-04 21:18:44.784 - work item time: 0.012ms average 05-04 21:18:45.426 Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-04 21:18:45.426 - benchmark repeat: 10 time(s) 05-04 21:18:45.426 - work items: 1000 per benchmark 05-04 21:18:45.426 - work item time: 0.063ms average 05-04 21:18:45.897 Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-04 21:18:45.898 - benchmark repeat: 10 time(s) 05-04 21:18:45.898 - work items: 1000 per benchmark 05-04 21:18:45.898 - work item time: 0.046ms average 05-04 21:19:12.680 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-04 21:19:12.680 I\/System.out: - benchmark repeat: 100 time(s) 05-04 21:19:12.680 I\/System.out: - work items: 1 per benchmark 05-04 21:19:12.680 I\/System.out: - work item time: 0.059ms average 05-04 21:19:12.701 I\/System.out: Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-04 21:19:12.701 I\/System.out: - benchmark repeat: 10 time(s) 05-04 21:19:12.701 I\/System.out: - work items: 1000 per benchmark 05-04 21:19:12.701 I\/System.out: - work item time: 0.002ms average 05-04 21:19:12.718 I\/System.out: Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-04 21:19:12.718 I\/System.out: - benchmark repeat: 10 time(s) 05-04 21:19:12.718 I\/System.out: - work items: 1000 per benchmark 05-04 21:19:12.718 I\/System.out: - work item time: 0.002ms average 05-04 21:19:12.747 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-04 21:19:12.747 I\/System.out: - benchmark repeat: 100 time(s) 05-04 21:19:12.747 I\/System.out: - work items: 1 per benchmark 05-04 21:19:12.747 I\/System.out: - work item time: 0.086ms average 05-04 21:19:12.835 I\/System.out: Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-04 21:19:12.835 I\/System.out: - benchmark repeat: 10 time(s) 05-04 21:19:12.835 I\/System.out: - work items: 1000 per benchmark 05-04 21:19:12.835 I\/System.out: - work item time: 0.008ms average 05-04 21:19:13.217 I\/System.out: Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-04 21:19:13.217 I\/System.out: - benchmark repeat: 10 time(s) 05-04 21:19:13.217 I\/System.out: - work items: 1000 per benchmark 05-04 21:19:13.217 I\/System.out: - work item time: 0.038ms average 05-04 21:19:13.244 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-04 21:19:13.244 I\/System.out: - benchmark repeat: 100 time(s) 05-04 21:19:13.244 I\/System.out: - work items: 1 per benchmark 05-04 21:19:13.244 I\/System.out: - work item time: 0.069ms average 05-04 21:19:13.373 I\/System.out: Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-04 21:19:13.373 I\/System.out: - benchmark repeat: 10 time(s) 05-04 21:19:13.373 I\/System.out: - work items: 1000 per benchmark 05-04 21:19:13.373 I\/System.out: - work item time: 0.012ms average 05-04 21:19:14.025 I\/System.out: Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-04 21:19:14.026 I\/System.out: - benchmark repeat: 10 time(s) 05-04 21:19:14.026 I\/System.out: - work items: 1000 per benchmark 05-04 21:19:14.026 I\/System.out: - work item time: 0.064ms average 05-04 21:19:14.499 I\/System.out: Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-04 21:19:14.499 I\/System.out: - benchmark repeat: 10 time(s) 05-04 21:19:14.499 I\/System.out: - work items: 1000 per benchmark 05-04 21:19:14.499 I\/System.out: - work item time: 0.046ms average 05-04 21:19:36.827 Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-04 21:19:36.827 - benchmark repeat: 100 time(s) 05-04 21:19:36.827 - work items: 1 per benchmark 05-04 21:19:36.827 - work item time: 0.053ms average 05-04 21:19:36.844 Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-04 21:19:36.844 - benchmark repeat: 10 time(s) 05-04 21:19:36.844 - work items: 1000 per benchmark 05-04 21:19:36.844 - work item time: 0.001ms average 05-04 21:19:36.861 Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-04 21:19:36.861 - benchmark repeat: 10 time(s) 05-04 21:19:36.861 - work items: 1000 per benchmark 05-04 21:19:36.861 - work item time: 0.002ms average 05-04 21:19:36.894 Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-04 21:19:36.894 - benchmark repeat: 100 time(s) 05-04 21:19:36.894 - work items: 1 per benchmark 05-04 21:19:36.894 - work item time: 0.101ms average 05-04 21:19:36.989 Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-04 21:19:36.989 - benchmark repeat: 10 time(s) 05-04 21:19:36.989 - work items: 1000 per benchmark 05-04 21:19:36.989 - work item time: 0.009ms average 05-04 21:19:37.376 Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-04 21:19:37.376 - benchmark repeat: 10 time(s) 05-04 21:19:37.376 - work items: 1000 per benchmark 05-04 21:19:37.376 - work item time: 0.038ms average 05-04 21:19:37.407 Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-04 21:19:37.407 - benchmark repeat: 100 time(s) 05-04 21:19:37.407 - work items: 1 per benchmark 05-04 21:19:37.407 - work item time: 0.078ms average 05-04 21:19:37.536 Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-04 21:19:37.536 - benchmark repeat: 10 time(s) 05-04 21:19:37.536 - work items: 1000 per benchmark 05-04 21:19:37.536 - work item time: 0.012ms average 05-04 21:19:38.192 Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-04 21:19:38.192 - benchmark repeat: 10 time(s) 05-04 21:19:38.192 - work items: 1000 per benchmark 05-04 21:19:38.192 - work item time: 0.065ms average 05-04 21:19:38.664 Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-04 21:19:38.664 - benchmark repeat: 10 time(s) 05-04 21:19:38.664 - work items: 1000 per benchmark 05-04 21:19:38.664 - work item time: 0.046ms average","tags":"","url":"About\/Performance\/Log_for_Nexus_5X.html"},{"title":"Log for Wiko Sunset 2","text":"Specs (full): Released in 2015 Android 4.4.2 512MB RAM Dual-core 1.3 GHz Cortex-A7 CPU 05-04 21:00:13.677 Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-04 21:00:13.677 - benchmark repeat: 100 time(s) 05-04 21:00:13.678 - work items: 1 per benchmark 05-04 21:00:13.678 - work item time: 0.327ms average 05-04 21:00:13.761 Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-04 21:00:13.761 - benchmark repeat: 10 time(s) 05-04 21:00:13.761 - work items: 1000 per benchmark 05-04 21:00:13.761 - work item time: 0.007ms average 05-04 21:00:13.901 Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-04 21:00:13.901 - benchmark repeat: 10 time(s) 05-04 21:00:13.901 - work items: 1000 per benchmark 05-04 21:00:13.901 - work item time: 0.013ms average 05-04 21:00:14.032 Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-04 21:00:14.032 - benchmark repeat: 100 time(s) 05-04 21:00:14.032 - work items: 1 per benchmark 05-04 21:00:14.032 - work item time: 0.558ms average 05-04 21:00:14.287 Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-04 21:00:14.287 - benchmark repeat: 10 time(s) 05-04 21:00:14.287 - work items: 1000 per benchmark 05-04 21:00:14.287 - work item time: 0.023ms average 05-04 21:00:15.125 Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-04 21:00:15.125 - benchmark repeat: 10 time(s) 05-04 21:00:15.125 - work items: 1000 per benchmark 05-04 21:00:15.125 - work item time: 0.079ms average 05-04 21:00:15.197 Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-04 21:00:15.197 - benchmark repeat: 100 time(s) 05-04 21:00:15.198 - work items: 1 per benchmark 05-04 21:00:15.198 - work item time: 0.197ms average 05-04 21:00:15.525 Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-04 21:00:15.525 - benchmark repeat: 10 time(s) 05-04 21:00:15.525 - work items: 1000 per benchmark 05-04 21:00:15.525 - work item time: 0.031ms average 05-04 21:00:16.812 Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-04 21:00:16.812 - benchmark repeat: 10 time(s) 05-04 21:00:16.812 - work items: 1000 per benchmark 05-04 21:00:16.812 - work item time: 0.126ms average 05-04 21:00:18.073 Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-04 21:00:18.073 - benchmark repeat: 10 time(s) 05-04 21:00:18.074 - work items: 1000 per benchmark 05-04 21:00:18.074 - work item time: 0.123ms average 05-04 21:01:28.484 Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-04 21:01:28.484 - benchmark repeat: 100 time(s) 05-04 21:01:28.485 - work items: 1 per benchmark 05-04 21:01:28.493 - work item time: 0.408ms average 05-04 21:01:28.610 Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-04 21:01:28.610 - benchmark repeat: 10 time(s) 05-04 21:01:28.610 - work items: 1000 per benchmark 05-04 21:01:28.610 - work item time: 0.009ms average 05-04 21:01:28.739 Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-04 21:01:28.739 - benchmark repeat: 10 time(s) 05-04 21:01:28.739 - work items: 1000 per benchmark 05-04 21:01:28.739 - work item time: 0.012ms average 05-04 21:01:28.852 Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-04 21:01:28.852 - benchmark repeat: 100 time(s) 05-04 21:01:28.852 - work items: 1 per benchmark 05-04 21:01:28.852 - work item time: 0.335ms average 05-04 21:01:29.104 Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-04 21:01:29.104 - benchmark repeat: 10 time(s) 05-04 21:01:29.104 - work items: 1000 per benchmark 05-04 21:01:29.104 - work item time: 0.023ms average 05-04 21:01:29.921 Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-04 21:01:29.921 - benchmark repeat: 10 time(s) 05-04 21:01:29.921 - work items: 1000 per benchmark 05-04 21:01:29.921 - work item time: 0.078ms average 05-04 21:01:29.993 Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-04 21:01:29.993 - benchmark repeat: 100 time(s) 05-04 21:01:29.993 - work items: 1 per benchmark 05-04 21:01:29.993 - work item time: 0.197ms average 05-04 21:01:30.311 Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-04 21:01:30.311 - benchmark repeat: 10 time(s) 05-04 21:01:30.311 - work items: 1000 per benchmark 05-04 21:01:30.311 - work item time: 0.030ms average 05-04 21:01:31.544 Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-04 21:01:31.544 - benchmark repeat: 10 time(s) 05-04 21:01:31.544 - work items: 1000 per benchmark 05-04 21:01:31.544 - work item time: 0.121ms average 05-04 21:01:32.737 Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-04 21:01:32.737 - benchmark repeat: 10 time(s) 05-04 21:01:32.737 - work items: 1000 per benchmark 05-04 21:01:32.737 - work item time: 0.116ms average 05-04 21:01:46.937 Ran benchmark spork.benchmark.core.OneFieldNewSporkBenchmark: 05-04 21:01:46.937 - benchmark repeat: 100 time(s) 05-04 21:01:46.937 - work items: 1 per benchmark 05-04 21:01:46.937 - work item time: 0.407ms average 05-04 21:01:47.072 Ran benchmark spork.benchmark.core.OneFieldSharedSporkInstance: 05-04 21:01:47.072 - benchmark repeat: 10 time(s) 05-04 21:01:47.072 - work items: 1000 per benchmark 05-04 21:01:47.072 - work item time: 0.011ms average 05-04 21:01:47.203 Ran benchmark spork.benchmark.core.FiveFieldSharedSporkBenchmark: 05-04 21:01:47.203 - benchmark repeat: 10 time(s) 05-04 21:01:47.203 - work items: 1000 per benchmark 05-04 21:01:47.203 - work item time: 0.010ms average 05-04 21:01:47.322 Ran benchmark spork.benchmark.inject.field.OneFieldNewSporkBenchmark: 05-04 21:01:47.322 - benchmark repeat: 100 time(s) 05-04 21:01:47.322 - work items: 1 per benchmark 05-04 21:01:47.322 - work item time: 0.338ms average 05-04 21:01:47.570 Ran benchmark spork.benchmark.inject.field.OneFieldSharedSporkBenchmark: 05-04 21:01:47.570 - benchmark repeat: 10 time(s) 05-04 21:01:47.570 - work items: 1000 per benchmark 05-04 21:01:47.570 - work item time: 0.023ms average 05-04 21:01:48.388 Ran benchmark spork.benchmark.inject.field.FiveFieldSharedSporkBenchmark: 05-04 21:01:48.388 - benchmark repeat: 10 time(s) 05-04 21:01:48.388 - work items: 1000 per benchmark 05-04 21:01:48.388 - work item time: 0.079ms average 05-04 21:01:48.462 Ran benchmark spork.benchmark.inject.method.OneMethodNewSporkBenchmark: 05-04 21:01:48.462 - benchmark repeat: 100 time(s) 05-04 21:01:48.462 - work items: 1 per benchmark 05-04 21:01:48.462 - work item time: 0.195ms average 05-04 21:01:48.767 Ran benchmark spork.benchmark.inject.method.OneMethodSharedSporkBenchmark: 05-04 21:01:48.767 - benchmark repeat: 10 time(s) 05-04 21:01:48.767 - work items: 1000 per benchmark 05-04 21:01:48.767 - work item time: 0.029ms average 05-04 21:01:49.997 Ran benchmark spork.benchmark.inject.method.FiveMethodSharedSporkBenchmark: 05-04 21:01:49.997 - benchmark repeat: 10 time(s) 05-04 21:01:49.997 - work items: 1000 per benchmark 05-04 21:01:49.997 - work item time: 0.119ms average 05-04 21:01:51.202 Ran benchmark spork.benchmark.inject.complex.ComplexInjectBenchmark: 05-04 21:01:51.202 - benchmark repeat: 10 time(s) 05-04 21:01:51.202 - work items: 1000 per benchmark 05-04 21:01:51.202 - work item time: 0.115ms average","tags":"","url":"About\/Performance\/Log_for_Wiko_Sunset_2.html"}]}