{
    "docs": [
        {
            "location": "/", 
            "text": "Spork 4.0\n\n\nGetting started on Android\n\n\nWARNING\n: Spork 4.0 is only accessible as a snapshot release.\nThis is not a final release and is subject to potential changes in its API.\n\n\nAdd the following dependencies in \nbuild.gradle\n:\n\n\nrepositories {\n    maven {\n        url  \nhttp://dl.bintray.com/bytewelder/maven-snapshot\n \n    }\n}\n\ndependencies {\n    // Spork core\n    compile 'com.bytewelder.spork:spork:4.0.0'\n\n    // Spork Dependency Injection\n    compile 'com.bytewelder.spork:spork-inject:4.0.0'\n\n    // Spork for Android (second line is optional)\n    compile 'com.bytewelder.spork:spork-android:4.0.0@aar'\n    compile 'com.bytewelder.spork:spork-android-support:4.0.0@aar'\n}\n\n\n\n\nGetting started on Java\n\n\nAdd the following dependencies in \nbuild.gradle\n:\n\n\ndependencies {\n    compile 'com.bytewelder.spork:spork:4.0.0'\n    compile 'com.bytewelder.spork:spork-inject:4.0.0'\n}\n\n\n\n\nAll dependencies are available at \nMaven Central Repository\n.\n\n\nMigrating from 3.x to 4.0:\n\n\n\n\nrepository is moved to jCenter with snapshots at http://dl.bintray.com/bytewelder/maven-snapshot\n\n\nbase packages moved from \nio.github.sporklibrary\n to \nspork\n\n\n@BindComponent\n is now \n@Inject\n (with support for \n@Nullable\n, \n@NonNull\n and \n@Lazy\n annotations)\n\n\n@ComponentScope(Scope.SINGLETON)\n is now \n@Singleton\n\n\nremoved custom support for \nRecyclerView.ViewHolder\n as you can now make it implement \nViewProvider\n\n\nFieldBinder\n, \nMethodBinder\n and \nTypeBinder\n interfaces are changed", 
            "title": "Home"
        }, 
        {
            "location": "/#spork-40", 
            "text": "", 
            "title": "Spork 4.0"
        }, 
        {
            "location": "/#getting-started-on-android", 
            "text": "WARNING : Spork 4.0 is only accessible as a snapshot release. This is not a final release and is subject to potential changes in its API.  Add the following dependencies in  build.gradle :  repositories {\n    maven {\n        url   http://dl.bintray.com/bytewelder/maven-snapshot  \n    }\n}\n\ndependencies {\n    // Spork core\n    compile 'com.bytewelder.spork:spork:4.0.0'\n\n    // Spork Dependency Injection\n    compile 'com.bytewelder.spork:spork-inject:4.0.0'\n\n    // Spork for Android (second line is optional)\n    compile 'com.bytewelder.spork:spork-android:4.0.0@aar'\n    compile 'com.bytewelder.spork:spork-android-support:4.0.0@aar'\n}", 
            "title": "Getting started on Android"
        }, 
        {
            "location": "/#getting-started-on-java", 
            "text": "Add the following dependencies in  build.gradle :  dependencies {\n    compile 'com.bytewelder.spork:spork:4.0.0'\n    compile 'com.bytewelder.spork:spork-inject:4.0.0'\n}  All dependencies are available at  Maven Central Repository .", 
            "title": "Getting started on Java"
        }, 
        {
            "location": "/#migrating-from-3x-to-40", 
            "text": "repository is moved to jCenter with snapshots at http://dl.bintray.com/bytewelder/maven-snapshot  base packages moved from  io.github.sporklibrary  to  spork  @BindComponent  is now  @Inject  (with support for  @Nullable ,  @NonNull  and  @Lazy  annotations)  @ComponentScope(Scope.SINGLETON)  is now  @Singleton  removed custom support for  RecyclerView.ViewHolder  as you can now make it implement  ViewProvider  FieldBinder ,  MethodBinder  and  TypeBinder  interfaces are changed", 
            "title": "Migrating from 3.x to 4.0:"
        }, 
        {
            "location": "/spork-core/introduction/", 
            "text": "Spork Core\n\n\nSpork Core contains the basic building blocks where the other Spork libraries are built upon.\n\n\nIt is provides annotation processing interfaces for classes(\"types\"), fields and methods.\n\n\nDependencies\n\n\nAdd the following dependencies in \nbuild.gradle\n:\n\n\ndependencies {\n    compile 'com.bytewelder.spork:spork:4.0.0'\n}", 
            "title": "Introduction"
        }, 
        {
            "location": "/spork-core/introduction/#spork-core", 
            "text": "Spork Core contains the basic building blocks where the other Spork libraries are built upon.  It is provides annotation processing interfaces for classes(\"types\"), fields and methods.", 
            "title": "Spork Core"
        }, 
        {
            "location": "/spork-core/introduction/#dependencies", 
            "text": "Add the following dependencies in  build.gradle :  dependencies {\n    compile 'com.bytewelder.spork:spork:4.0.0'\n}", 
            "title": "Dependencies"
        }, 
        {
            "location": "/spork-core/creating-annotations/", 
            "text": "Creating Annotations\n\n\nOverview\n\n\nSpork annotations are bound through one or more of:\n\n\n\n\nMethodBinder\n\n\nFieldBinder\n\n\nTypeBinder\n\n\n\n\nThese binders are registered through a \nBinderRegistery\n which is accessible through \nSpork.sharedInstance().getBinderRegistry()\n\n\nFieldBinder\n\n\nFieldBinders are used for annotations that target \nElementType.FIELD\n.\n\n\nExample\n\n\npublic class BindViewBinder implements FieldBinder\nBindView\n {\n\n    @Override\n    public void bind(Object object, BindView annotation, Field field, Object[] modules) {\n        if (!View.class.isAssignableFrom(field.getType())) {\n            throw new BindException(/* ... */);\n        }\n\n        View view = Views.getView(viewResolver, annotation.value(), field.getName(), object);\n\n        Reflection.setFieldValue(annotation, field, object, view);\n    }\n\n    @Override\n    public Class\nBindView\n getAnnotationClass() {\n        return BindView.class;\n    }\n}\n\n\n\n\nMethodBinder\n\n\nMethodBinders are used for annotations that target \nElementType.METHOD\n.\n\n\nExample\n\n\npublic class BindClickBinder implements MethodBinder\nBindClick\n {\n\n    @Override\n    public void bind(Object object, BindClick annotation, Method method, @Nullable Object[] modules) {\n        View view = Views.getView(viewResolver, annotation.value(), method.getName(), object);\n        view.setOnClickListener(new OnClickListener() {\n            /* handle click */\n        });\n    }\n\n    @Override\n    public Class\nBindClick\n getAnnotationClass() {\n        return BindClick.class;\n    }\n}\n\n\n\n\nTypeBinder\n\n\nTypeBinders are used for annotations that target \nElementType.TYPE\n.\n\n\nExample\n\n\npublic interface IntSettable {\n    void setValue(int value);\n}\n\npublic class ValueBinder implements TypeBinder\nBindValue\n {\n\n    @Override\n    void bind(Object object, IntSettable annotation, Class\n?\n annotatedType, Object[] modules) {\n        // @BindValue only works with IntSettable implementations\n        if (!IntSettable.class.isAssignableFrom(object.getClass())) {\n            throw new BindException(/* ... */);\n        }\n\n        // Safely convert to IntSettable\n        IntSettable value_holder = (IntSettable)object;\n\n        // Set the integer value\n        int value = annotatedClass.getAnnotation().value();\n        value_holder.setValue(value);\n    }\n\n    @Override\n    public Class\nBindValue\n getAnnotationClass() {\n        return BindValue.class;\n    }\n}\n\n\n\n\n\nBinder registration\n\n\nSingle target binders\n\n\nFor binders that only bind to a single annotation target (e.g. \nElementType.FIELD\n, \nElementType.METHOD\n or \nElementType.TYPE\n). The following code demonstrates this.\n\n\nYourAnnotation.java\n\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface YourAnnotation {\n}\n\n\n\n\nYourAnnotationBinder.java\n\n\nclass YourAnnotationBinder implements MethodBinder\nYourAnnotation\n {\n    // implementation\n}\n\n\n\n\nMain.java\n\n\nSpork.sharedInstance().getBinderRegistry().register(new YourAnnotationBinder());\n\n\n\n\nMulti-target binders\n\n\nFor binders that only bind to multiple annotation targets (e.g. \nElementType.FIELD\n, \nElementType.METHOD\n or \nElementType.TYPE\n). The following code demonstrates this.\n\n\nYourAnnotation.java\n\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ ElementType.METHOD, Element.FIELD })\npublic @interface YourAnnotation {\n}\n\n\n\n\nYourAnnotationBinder.java\n\n\nclass YourAnnotationBinder\n    implements MethodBinder\nYourAnnotation\n, FieldBinder\nYourAnnotation\n {\n    // implementation\n}\n\n\n\n\nMain.java\n\n\nYourAnnotationBinder binder = new YourAnnotationBinder();\n\n// register as MethodBinder\nSpork.sharedInstance().getBinderRegistry().register((MethodBinder\nYourAnnotation\n)binder);\n// register as FieldBinder\nSpork.sharedInstance().getBinderRegistry().register((FieldBinder\nYourAnnotation\n)binder);", 
            "title": "Creating Annotations"
        }, 
        {
            "location": "/spork-core/creating-annotations/#creating-annotations", 
            "text": "", 
            "title": "Creating Annotations"
        }, 
        {
            "location": "/spork-core/creating-annotations/#overview", 
            "text": "Spork annotations are bound through one or more of:   MethodBinder  FieldBinder  TypeBinder   These binders are registered through a  BinderRegistery  which is accessible through  Spork.sharedInstance().getBinderRegistry()", 
            "title": "Overview"
        }, 
        {
            "location": "/spork-core/creating-annotations/#fieldbinder", 
            "text": "FieldBinders are used for annotations that target  ElementType.FIELD .", 
            "title": "FieldBinder"
        }, 
        {
            "location": "/spork-core/creating-annotations/#example", 
            "text": "public class BindViewBinder implements FieldBinder BindView  {\n\n    @Override\n    public void bind(Object object, BindView annotation, Field field, Object[] modules) {\n        if (!View.class.isAssignableFrom(field.getType())) {\n            throw new BindException(/* ... */);\n        }\n\n        View view = Views.getView(viewResolver, annotation.value(), field.getName(), object);\n\n        Reflection.setFieldValue(annotation, field, object, view);\n    }\n\n    @Override\n    public Class BindView  getAnnotationClass() {\n        return BindView.class;\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/spork-core/creating-annotations/#methodbinder", 
            "text": "MethodBinders are used for annotations that target  ElementType.METHOD .", 
            "title": "MethodBinder"
        }, 
        {
            "location": "/spork-core/creating-annotations/#example_1", 
            "text": "public class BindClickBinder implements MethodBinder BindClick  {\n\n    @Override\n    public void bind(Object object, BindClick annotation, Method method, @Nullable Object[] modules) {\n        View view = Views.getView(viewResolver, annotation.value(), method.getName(), object);\n        view.setOnClickListener(new OnClickListener() {\n            /* handle click */\n        });\n    }\n\n    @Override\n    public Class BindClick  getAnnotationClass() {\n        return BindClick.class;\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/spork-core/creating-annotations/#typebinder", 
            "text": "TypeBinders are used for annotations that target  ElementType.TYPE .", 
            "title": "TypeBinder"
        }, 
        {
            "location": "/spork-core/creating-annotations/#example_2", 
            "text": "public interface IntSettable {\n    void setValue(int value);\n}\n\npublic class ValueBinder implements TypeBinder BindValue  {\n\n    @Override\n    void bind(Object object, IntSettable annotation, Class ?  annotatedType, Object[] modules) {\n        // @BindValue only works with IntSettable implementations\n        if (!IntSettable.class.isAssignableFrom(object.getClass())) {\n            throw new BindException(/* ... */);\n        }\n\n        // Safely convert to IntSettable\n        IntSettable value_holder = (IntSettable)object;\n\n        // Set the integer value\n        int value = annotatedClass.getAnnotation().value();\n        value_holder.setValue(value);\n    }\n\n    @Override\n    public Class BindValue  getAnnotationClass() {\n        return BindValue.class;\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/spork-core/creating-annotations/#binder-registration", 
            "text": "", 
            "title": "Binder registration"
        }, 
        {
            "location": "/spork-core/creating-annotations/#single-target-binders", 
            "text": "For binders that only bind to a single annotation target (e.g.  ElementType.FIELD ,  ElementType.METHOD  or  ElementType.TYPE ). The following code demonstrates this.  YourAnnotation.java  @Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface YourAnnotation {\n}  YourAnnotationBinder.java  class YourAnnotationBinder implements MethodBinder YourAnnotation  {\n    // implementation\n}  Main.java  Spork.sharedInstance().getBinderRegistry().register(new YourAnnotationBinder());", 
            "title": "Single target binders"
        }, 
        {
            "location": "/spork-core/creating-annotations/#multi-target-binders", 
            "text": "For binders that only bind to multiple annotation targets (e.g.  ElementType.FIELD ,  ElementType.METHOD  or  ElementType.TYPE ). The following code demonstrates this.  YourAnnotation.java  @Retention(RetentionPolicy.RUNTIME)\n@Target({ ElementType.METHOD, Element.FIELD })\npublic @interface YourAnnotation {\n}  YourAnnotationBinder.java  class YourAnnotationBinder\n    implements MethodBinder YourAnnotation , FieldBinder YourAnnotation  {\n    // implementation\n}  Main.java  YourAnnotationBinder binder = new YourAnnotationBinder();\n\n// register as MethodBinder\nSpork.sharedInstance().getBinderRegistry().register((MethodBinder YourAnnotation )binder);\n// register as FieldBinder\nSpork.sharedInstance().getBinderRegistry().register((FieldBinder YourAnnotation )binder);", 
            "title": "Multi-target binders"
        }, 
        {
            "location": "/spork-inject/introduction/", 
            "text": "Spork Inject\n\n\nThis library provides POJO dependency injection through annotations provided by the \njavax.inject\n package.\n\n\nSupported javax annotations:\n\n\n\n\njavax.inject.Inject\n\n\njavax.inject.Singleton\n\n\njavax.inject.Named\n\n\njavax.inject.Provider\n\n\njavax.inject.Scope\n\n\njavax.inject.Qualifier\n\n\n\n\nSpork annotations included are:\n\n\n\n\nspork.inject.Provides\n for factory methods in a module that provide injectable instances\n\n\n\n\nDependencies\n\n\nAdd the following dependencies in \nbuild.gradle\n:\n\n\ndependencies {\n    compile 'com.bytewelder.spork:spork:4.0.0'\n    compile 'com.bytewelder.spork:spork-inject:4.0.0'\n}\n\n\n\n\nExample\n\n\n\npublic static class Module {\n    @Provides\n    public Integer provideNumber() {\n        return 1;\n    }\n\n    @Provides\n    @Named(\ncolor\n)\n    public String provideColor() {\n        return \nred\n;\n    }\n\n    @Provides\n    @Named(\nanything\n)\n    public String provideColor() {\n        return \n123\n;\n    }\n\n    @Provides\n    @Singleton\n    public DownloadService provideDownloadService(HttpService service) {\n        return new DownloadServiceImpl(service);\n    }\n\n    @Provides\n    @Singleton\n    public HttpService provideHttpService() {\n        return new HttpServiceImpl(service);\n    }\n}\n\nprivate static class Parent {\n    @Inject\n    private Integer integerValue;\n\n    @Inject\n    @Named(\ncolor\n)\n    private String color;\n\n    @Inject\n    @Named(\nanything\n)\n    private String anything;\n\n    @Inject\n    private DownloadService downloadService;\n\n    public Parent() {\n        ObjectGraph graph = new ObjectGraph.Builder()\n                .module(new Module())\n                .build();\n\n        Spork.bind(this, graph);\n    }\n}", 
            "title": "Introduction"
        }, 
        {
            "location": "/spork-inject/introduction/#spork-inject", 
            "text": "This library provides POJO dependency injection through annotations provided by the  javax.inject  package.  Supported javax annotations:   javax.inject.Inject  javax.inject.Singleton  javax.inject.Named  javax.inject.Provider  javax.inject.Scope  javax.inject.Qualifier   Spork annotations included are:   spork.inject.Provides  for factory methods in a module that provide injectable instances", 
            "title": "Spork Inject"
        }, 
        {
            "location": "/spork-inject/introduction/#dependencies", 
            "text": "Add the following dependencies in  build.gradle :  dependencies {\n    compile 'com.bytewelder.spork:spork:4.0.0'\n    compile 'com.bytewelder.spork:spork-inject:4.0.0'\n}", 
            "title": "Dependencies"
        }, 
        {
            "location": "/spork-inject/introduction/#example", 
            "text": "public static class Module {\n    @Provides\n    public Integer provideNumber() {\n        return 1;\n    }\n\n    @Provides\n    @Named( color )\n    public String provideColor() {\n        return  red ;\n    }\n\n    @Provides\n    @Named( anything )\n    public String provideColor() {\n        return  123 ;\n    }\n\n    @Provides\n    @Singleton\n    public DownloadService provideDownloadService(HttpService service) {\n        return new DownloadServiceImpl(service);\n    }\n\n    @Provides\n    @Singleton\n    public HttpService provideHttpService() {\n        return new HttpServiceImpl(service);\n    }\n}\n\nprivate static class Parent {\n    @Inject\n    private Integer integerValue;\n\n    @Inject\n    @Named( color )\n    private String color;\n\n    @Inject\n    @Named( anything )\n    private String anything;\n\n    @Inject\n    private DownloadService downloadService;\n\n    public Parent() {\n        ObjectGraph graph = new ObjectGraph.Builder()\n                .module(new Module())\n                .build();\n\n        Spork.bind(this, graph);\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/spork-android/introduction/", 
            "text": "Spork Android\n\n\nIntroduction\n\n\nSpork Android contains 2 packages:\n\n\n\n\nspork-android\n which provides all basic Android injection\n\n\nspork-android-support\n which provides injection for \nandroid.support.v4.app.Fragment\n\n\n\n\nDependencies\n\n\nAdd the following dependencies in \nbuild.gradle\n:\n\n\ndependencies {\n    // Spork core\n    compile 'com.bytewelder.spork:spork:4.0.0'\n\n    // Spork for Android (second line is optional)\n    compile 'com.bytewelder.spork:spork-android:4.0.0@aar'\n\n    // Spork for Android: support libraries (optional)\n    compile 'com.bytewelder.spork:spork-android-support:4.0.0@aar'\n}", 
            "title": "Introduction"
        }, 
        {
            "location": "/spork-android/introduction/#spork-android", 
            "text": "", 
            "title": "Spork Android"
        }, 
        {
            "location": "/spork-android/introduction/#introduction", 
            "text": "Spork Android contains 2 packages:   spork-android  which provides all basic Android injection  spork-android-support  which provides injection for  android.support.v4.app.Fragment", 
            "title": "Introduction"
        }, 
        {
            "location": "/spork-android/introduction/#dependencies", 
            "text": "Add the following dependencies in  build.gradle :  dependencies {\n    // Spork core\n    compile 'com.bytewelder.spork:spork:4.0.0'\n\n    // Spork for Android (second line is optional)\n    compile 'com.bytewelder.spork:spork-android:4.0.0@aar'\n\n    // Spork for Android: support libraries (optional)\n    compile 'com.bytewelder.spork:spork-android-support:4.0.0@aar'\n}", 
            "title": "Dependencies"
        }, 
        {
            "location": "/spork-android/annotations/bindclick/", 
            "text": "@BindClick\n\n\nThis annotation can be used with classes inheriting/implementing:\n\n\n\n\nandroid.app.\nActivity\n\n\nandroid.app.\nFragment\n\n\nandroid.support.v4.app.\nFragment\n (with the \nspork-android-support\n dependency)\n\n\nandroid.view.\nView\n\n\nio.github.sporklibrary.android.interfaces.\nViewProvider\n\n\n\n\nYou can specify the view id as the annotation value:\n\n\n@BindClick(R.id.download_button)\nprivate void onClickDownload() {\n}\n\n\n\n\nAlternatively, you can imply the view id by the method name:\n\n\n@BindClick\nprivate void download_button() {\n}\n\n\n\n\nYou can also pass the any compatible View instance as method argument:\n\n\n@BindClick(R.id.download_button)\nprivate void onClickDownload(Button button) {\n}", 
            "title": "@BindClick"
        }, 
        {
            "location": "/spork-android/annotations/bindclick/#bindclick", 
            "text": "This annotation can be used with classes inheriting/implementing:   android.app. Activity  android.app. Fragment  android.support.v4.app. Fragment  (with the  spork-android-support  dependency)  android.view. View  io.github.sporklibrary.android.interfaces. ViewProvider   You can specify the view id as the annotation value:  @BindClick(R.id.download_button)\nprivate void onClickDownload() {\n}  Alternatively, you can imply the view id by the method name:  @BindClick\nprivate void download_button() {\n}  You can also pass the any compatible View instance as method argument:  @BindClick(R.id.download_button)\nprivate void onClickDownload(Button button) {\n}", 
            "title": "@BindClick"
        }, 
        {
            "location": "/spork-android/annotations/bindfragment/", 
            "text": "@BindFragment\n\n\nThis annotation can be used with classes derived from:\n\n\n\n\nandroid.app.\nActivity\n\n\nandroid.app.\nFragment\n\n\nandroid.support.v4.app.\nFragment\n (with the \nspork-android-support\n dependency)\n\n\n\n\nYou can bind a fragment by specifying its id:\n\n\n@BindFragment(R.id.my_fragment)\nprivate Fragment myFragment;\n\n\n\n\nAlternatively, you can imply the fragment id by the field name:\n\n\n@BindFragment\nprivate Fragment my_fragment;", 
            "title": "@BindFragment"
        }, 
        {
            "location": "/spork-android/annotations/bindfragment/#bindfragment", 
            "text": "This annotation can be used with classes derived from:   android.app. Activity  android.app. Fragment  android.support.v4.app. Fragment  (with the  spork-android-support  dependency)   You can bind a fragment by specifying its id:  @BindFragment(R.id.my_fragment)\nprivate Fragment myFragment;  Alternatively, you can imply the fragment id by the field name:  @BindFragment\nprivate Fragment my_fragment;", 
            "title": "@BindFragment"
        }, 
        {
            "location": "/spork-android/annotations/bindlayout/", 
            "text": "@BindLayout\n\n\nThis annotation can be used with classes inheriting:\n\n\n\n\nandroid.app.\nActivity\n\n\nandroid.view.\nViewGroup\n\n\n\n\nWhen using it for \nViewGroup\n, a \nFrameLayout\n is preferred as the inflated layout will be added as a child to it.\n\n\nExample: Activity\n\n\n@BindLayout(R.layout.activity_custom)\npublic class CustomActivity extends Activity {\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Spork.bind(this);\n    }\n}\n\n\n\n\nExample: ViewGroup\n\n\n@BindLayout(R.layout.view_custom)\npublic class CustomView extends FrameLayout {\n\n    public MyView(Context context) {\n        super(context);\n        Spork.bind(this);\n    }\n}", 
            "title": "@BindLayout"
        }, 
        {
            "location": "/spork-android/annotations/bindlayout/#bindlayout", 
            "text": "This annotation can be used with classes inheriting:   android.app. Activity  android.view. ViewGroup   When using it for  ViewGroup , a  FrameLayout  is preferred as the inflated layout will be added as a child to it.", 
            "title": "@BindLayout"
        }, 
        {
            "location": "/spork-android/annotations/bindlayout/#example-activity", 
            "text": "@BindLayout(R.layout.activity_custom)\npublic class CustomActivity extends Activity {\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Spork.bind(this);\n    }\n}", 
            "title": "Example: Activity"
        }, 
        {
            "location": "/spork-android/annotations/bindlayout/#example-viewgroup", 
            "text": "@BindLayout(R.layout.view_custom)\npublic class CustomView extends FrameLayout {\n\n    public MyView(Context context) {\n        super(context);\n        Spork.bind(this);\n    }\n}", 
            "title": "Example: ViewGroup"
        }, 
        {
            "location": "/spork-android/annotations/bindresource/", 
            "text": "@BindResoure\n\n\nThis annotation can be used with classes inheriting/implementing:\n\n\n\n\nandroid.app.\nActivity\n\n\nandroid.app.\nApplication\n\n\nandroid.app.\nFragment\n\n\nandroid.app.\nService\n\n\nandroid.content.\nContentProvider\n\n\nandroid.support.v4.app.\nFragment\n (with the \nspork-android-support\n dependency)\n\n\nandroid.view.\nView\n\n\nio.github.sporklibrary.android.interfaces.\nContextProvider\n\n\nio.github.sporklibrary.android.interfaces.\nViewProvider\n\n\n\n\nIt can bind:\n\n\n\n\nR.dimen.*\n to \nFloat\n or \nfloat\n fields\n\n\nR.string.*\n to \nString\n fields\n\n\nR.integer.*\n to \nInteger\n and \nint\n fields\n\n\nR.bool.*\n to \nBoolean\n and \nboolean\n fields\n\n\nR.drawable.*\n to \nDrawable\n fields\n\n\n\n\nYou can bind a resource by specifying its id:\n\n\n@BindResource(R.string.app_name)\nprivate String appName;\n\n\n\n\nAlternatively, you can imply the view id by the field name:\n\n\n@BindResource\nprivate String app_name;\n\n\n\n\nExample\n\n\npublic class MyActivity extends Activity {\n\n    @BindResource(R.string.app_name)\n    private String appName;\n\n    @BindResource\n    private String app_name;\n\n    @BindResource(R.dimen.spork_test_dimension)\n    private float sporkTestDimension;\n\n    @BindResource\n    private Float spork_test_dimension;\n\n    @BindResource(R.drawable.spork_test_drawable)\n    private Drawable sporkTestDrawable;\n\n    @BindResource\n    private Drawable spork_test_drawable;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Spork.bind(this);\n    }\n}", 
            "title": "@BindResource"
        }, 
        {
            "location": "/spork-android/annotations/bindresource/#bindresoure", 
            "text": "This annotation can be used with classes inheriting/implementing:   android.app. Activity  android.app. Application  android.app. Fragment  android.app. Service  android.content. ContentProvider  android.support.v4.app. Fragment  (with the  spork-android-support  dependency)  android.view. View  io.github.sporklibrary.android.interfaces. ContextProvider  io.github.sporklibrary.android.interfaces. ViewProvider   It can bind:   R.dimen.*  to  Float  or  float  fields  R.string.*  to  String  fields  R.integer.*  to  Integer  and  int  fields  R.bool.*  to  Boolean  and  boolean  fields  R.drawable.*  to  Drawable  fields   You can bind a resource by specifying its id:  @BindResource(R.string.app_name)\nprivate String appName;  Alternatively, you can imply the view id by the field name:  @BindResource\nprivate String app_name;", 
            "title": "@BindResoure"
        }, 
        {
            "location": "/spork-android/annotations/bindresource/#example", 
            "text": "public class MyActivity extends Activity {\n\n    @BindResource(R.string.app_name)\n    private String appName;\n\n    @BindResource\n    private String app_name;\n\n    @BindResource(R.dimen.spork_test_dimension)\n    private float sporkTestDimension;\n\n    @BindResource\n    private Float spork_test_dimension;\n\n    @BindResource(R.drawable.spork_test_drawable)\n    private Drawable sporkTestDrawable;\n\n    @BindResource\n    private Drawable spork_test_drawable;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Spork.bind(this);\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/spork-android/annotations/bindview/", 
            "text": "@BindView\n\n\nThis annotation can be used with classes inheriting/implementing:\n\n\n\n\nandroid.app.\nActivity\n\n\nandroid.app.\nFragment\n\n\nandroid.support.v4.app.\nFragment\n (with the \nspork-android-support\n dependency)\n\n\nandroid.view.\nView\n\n\nio.github.sporklibrary.android.interfaces.\nViewProvider\n\n\n\n\nYou can bind a view by specifying its id:\n\n\n@BindView(R.id.my_button)\nprivate Button button;\n\n\n\n\nAlternatively, you can imply the view id by the field name:\n\n\n@BindView\nprivate Button my_button;", 
            "title": "@BindView"
        }, 
        {
            "location": "/spork-android/annotations/bindview/#bindview", 
            "text": "This annotation can be used with classes inheriting/implementing:   android.app. Activity  android.app. Fragment  android.support.v4.app. Fragment  (with the  spork-android-support  dependency)  android.view. View  io.github.sporklibrary.android.interfaces. ViewProvider   You can bind a view by specifying its id:  @BindView(R.id.my_button)\nprivate Button button;  Alternatively, you can imply the view id by the field name:  @BindView\nprivate Button my_button;", 
            "title": "@BindView"
        }, 
        {
            "location": "/spork-android/examples/application/", 
            "text": "Application\n\n\nIntroduction\n\n\nThe following annotations are supported:\n\n\n\n\n@BindResource\n\n\n@Inject\n\n\n\n\nExample\n\n\npublic class MyApplication extends android.app.Application {\n\n    @BindResource(R.string.app_name)\n    private String appName;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Spork.bind(this);\n    }\n}", 
            "title": "Application"
        }, 
        {
            "location": "/spork-android/examples/application/#application", 
            "text": "", 
            "title": "Application"
        }, 
        {
            "location": "/spork-android/examples/application/#introduction", 
            "text": "The following annotations are supported:   @BindResource  @Inject", 
            "title": "Introduction"
        }, 
        {
            "location": "/spork-android/examples/application/#example", 
            "text": "public class MyApplication extends android.app.Application {\n\n    @BindResource(R.string.app_name)\n    private String appName;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Spork.bind(this);\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/spork-android/examples/activity/", 
            "text": "Activity\n\n\nIntroduction\n\n\nThe following annotations are supported:\n\n\n\n\n@BindClick\n\n\n@BindView\n\n\n@BindLayout\n\n\n@BindResource\n\n\n@BindFragment\n\n\n@Inject\n\n\n\n\nExample\n\n\n@BindLayout(R.layout.activity_download)\npublic class DownloadActivity extends Activity {\n\n    @BindView(R.id.download_button)\n    private Button downloadButton;\n\n    @BindFragment(R.id.details_fragment)\n    private DetailsFragment fragment;\n\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Spork.bind(this); // Spork does its magic\n    }\n\n    @BindClick(R.id.other_button)\n    private void onClickButton(Button someButton) {\n        downloadManager.startDownload();\n    }\n}", 
            "title": "Activity"
        }, 
        {
            "location": "/spork-android/examples/activity/#activity", 
            "text": "", 
            "title": "Activity"
        }, 
        {
            "location": "/spork-android/examples/activity/#introduction", 
            "text": "The following annotations are supported:   @BindClick  @BindView  @BindLayout  @BindResource  @BindFragment  @Inject", 
            "title": "Introduction"
        }, 
        {
            "location": "/spork-android/examples/activity/#example", 
            "text": "@BindLayout(R.layout.activity_download)\npublic class DownloadActivity extends Activity {\n\n    @BindView(R.id.download_button)\n    private Button downloadButton;\n\n    @BindFragment(R.id.details_fragment)\n    private DetailsFragment fragment;\n\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Spork.bind(this); // Spork does its magic\n    }\n\n    @BindClick(R.id.other_button)\n    private void onClickButton(Button someButton) {\n        downloadManager.startDownload();\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/spork-android/examples/contentprovider/", 
            "text": "ContentProvider\n\n\nIntroduction\n\n\nThe following annotations are supported:\n\n\n\n\n@BindResource\n\n\n@Inject\n\n\n\n\nExample\n\n\npublic class CustomContentProvider extends ContentProvider {\n\n    @BindResource(R.string.helloworld)\n    private String helloWorld;\n\n    @Override\n    public boolean onCreate() {\n        Spork.bind(this, new Module());\n        return true;\n    }\n\n    // ContentProvider methods\n}", 
            "title": "ContentProvider"
        }, 
        {
            "location": "/spork-android/examples/contentprovider/#contentprovider", 
            "text": "", 
            "title": "ContentProvider"
        }, 
        {
            "location": "/spork-android/examples/contentprovider/#introduction", 
            "text": "The following annotations are supported:   @BindResource  @Inject", 
            "title": "Introduction"
        }, 
        {
            "location": "/spork-android/examples/contentprovider/#example", 
            "text": "public class CustomContentProvider extends ContentProvider {\n\n    @BindResource(R.string.helloworld)\n    private String helloWorld;\n\n    @Override\n    public boolean onCreate() {\n        Spork.bind(this, new Module());\n        return true;\n    }\n\n    // ContentProvider methods\n}", 
            "title": "Example"
        }, 
        {
            "location": "/spork-android/examples/fragment/", 
            "text": "Fragment\n\n\nIntroduction\n\n\nYou can also use \nandroid.support.v4.app.Fragment\n if you add the \nspork-android-support\n dependency.\n\n\nThe following annotations are supported:\n\n\n\n\n@BindClick\n\n\n@BindView\n\n\n@BindResource\n\n\n@BindFragment\n\n\n@Inject\n\n\n\n\nExample\n\n\npublic class MyFragment extends Fragment {\n\n    @BindView(R.id.some_textview)\n    private TextView myTextView;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater,\n        @Nullable ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment_click_binding, container);\n    }\n\n    @Override\n    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n        Spork.bind(this);\n    }\n\n    @BindClick(R.id.some_button)\n    private void onClick() {\n        // click-handling code goes here\n    }\n}", 
            "title": "Fragment"
        }, 
        {
            "location": "/spork-android/examples/fragment/#fragment", 
            "text": "", 
            "title": "Fragment"
        }, 
        {
            "location": "/spork-android/examples/fragment/#introduction", 
            "text": "You can also use  android.support.v4.app.Fragment  if you add the  spork-android-support  dependency.  The following annotations are supported:   @BindClick  @BindView  @BindResource  @BindFragment  @Inject", 
            "title": "Introduction"
        }, 
        {
            "location": "/spork-android/examples/fragment/#example", 
            "text": "public class MyFragment extends Fragment {\n\n    @BindView(R.id.some_textview)\n    private TextView myTextView;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater,\n        @Nullable ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment_click_binding, container);\n    }\n\n    @Override\n    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n        Spork.bind(this);\n    }\n\n    @BindClick(R.id.some_button)\n    private void onClick() {\n        // click-handling code goes here\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/spork-android/examples/recyclerview/", 
            "text": "RecyclerView\n\n\nIntroduction\n\n\nTo bind \nRecyclerView\n views, you need to make \nRecyclerView.ViewHolder\n implement \nio.github.sporklibrary.android.interfaces.ViewProvider\n.\n\n\nThe following annotations are supported:\n\n\n\n\n@BindView\n\n\n@BindClick\n\n\n@BindResource\n\n\n@Inject\n\n\n\n\nExample\n\n\npublic class MyAdapter extends RecyclerView.Adapter\nMyAdapter.MyViewHolder\n {\n    private final List\nString\n items;\n\n    public MyAdapter(List\nString\n items) {\n        this.items = items;\n    }\n\n    public class MyViewHolder extends RecyclerView.ViewHolder implements ViewProvider {\n\n        @BindView(R.id.textview)\n        private TextView textView;\n\n        public MyViewHolder(View itemView) {\n            super(itemView);\n            Spork.bind(this);\n        }\n\n        public void update(String text) {\n            textView.setText(text);\n        }\n\n        @BindClick(R.id.textview)\n        private void onClick() {\n            // ...\n        }\n\n        @Override\n        public View getView() {\n            return itemView;\n        }\n    }\n\n    @Override\n    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        LayoutInflater inflater = LayoutInflater.from(parent.getContext());\n        View view = inflater.inflate(R.layout.view_recyclerview_item, parent, false);\n        return new MyViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(MyViewHolder holder, int position) {\n        String item = items.get(position);\n        holder.update(item);\n    }\n\n    @Override\n    public int getItemCount() {\n        return items.size();\n    }\n}", 
            "title": "RecyclerView"
        }, 
        {
            "location": "/spork-android/examples/recyclerview/#recyclerview", 
            "text": "", 
            "title": "RecyclerView"
        }, 
        {
            "location": "/spork-android/examples/recyclerview/#introduction", 
            "text": "To bind  RecyclerView  views, you need to make  RecyclerView.ViewHolder  implement  io.github.sporklibrary.android.interfaces.ViewProvider .  The following annotations are supported:   @BindView  @BindClick  @BindResource  @Inject", 
            "title": "Introduction"
        }, 
        {
            "location": "/spork-android/examples/recyclerview/#example", 
            "text": "public class MyAdapter extends RecyclerView.Adapter MyAdapter.MyViewHolder  {\n    private final List String  items;\n\n    public MyAdapter(List String  items) {\n        this.items = items;\n    }\n\n    public class MyViewHolder extends RecyclerView.ViewHolder implements ViewProvider {\n\n        @BindView(R.id.textview)\n        private TextView textView;\n\n        public MyViewHolder(View itemView) {\n            super(itemView);\n            Spork.bind(this);\n        }\n\n        public void update(String text) {\n            textView.setText(text);\n        }\n\n        @BindClick(R.id.textview)\n        private void onClick() {\n            // ...\n        }\n\n        @Override\n        public View getView() {\n            return itemView;\n        }\n    }\n\n    @Override\n    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        LayoutInflater inflater = LayoutInflater.from(parent.getContext());\n        View view = inflater.inflate(R.layout.view_recyclerview_item, parent, false);\n        return new MyViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(MyViewHolder holder, int position) {\n        String item = items.get(position);\n        holder.update(item);\n    }\n\n    @Override\n    public int getItemCount() {\n        return items.size();\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/spork-android/examples/service/", 
            "text": "Service\n\n\nIntroduction\n\n\nThe following annotations are supported:\n\n\n\n\n@BindResource\n\n\n@Inject\n\n\n\n\nExample\n\n\npublic class TestService extends Service {\n    @BindResource(R.string.helloworld)\n    private String helloWorld;\n\n    public class LocalBinder extends Binder {\n        public TestService getLocalService() {\n            return TestService.this;\n        }\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Spork.bind(this);\n    }\n\n    @Override\n    public @Nullable IBinder onBind(Intent intent) {\n        return new LocalBinder();\n    }\n}", 
            "title": "Service"
        }, 
        {
            "location": "/spork-android/examples/service/#service", 
            "text": "", 
            "title": "Service"
        }, 
        {
            "location": "/spork-android/examples/service/#introduction", 
            "text": "The following annotations are supported:   @BindResource  @Inject", 
            "title": "Introduction"
        }, 
        {
            "location": "/spork-android/examples/service/#example", 
            "text": "public class TestService extends Service {\n    @BindResource(R.string.helloworld)\n    private String helloWorld;\n\n    public class LocalBinder extends Binder {\n        public TestService getLocalService() {\n            return TestService.this;\n        }\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Spork.bind(this);\n    }\n\n    @Override\n    public @Nullable IBinder onBind(Intent intent) {\n        return new LocalBinder();\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/spork-android/examples/view/", 
            "text": "View\n\n\nIntroduction\n\n\nWhen creating a custom view, it's best to extend a \nFrameLayout\n, because \n@BindLayout\n will inflate the specified layout into it.\n\n\nThe following annotations are supported:\n\n\n\n\n@BindClick\n\n\n@BindView\n\n\n@BindLayout\n\n\n@BindResource\n\n\n@Inject\n\n\n\n\nExample\n\n\n@BindLayout(R.layout.view_layout_binding)\npublic class MyView extends FrameLayout {\n\n    @BindView(R.id.textview)\n    private TextView textView;\n\n    public MyView(Context context) {\n        super(context);\n        // Note: Spork.bind() must be called in \n        // all constructors that are implemented!\n        Spork.bind(this);\n    }\n\n    @BindClick(R.id.button_one)\n    private void onClickDownload() {\n        // ...\n    }\n\n    // BindClick can also pass the button that was clicked\n    @BindClick(R.id.button_two)\n    private void onClickOtherButton(Button otherButton) {\n        // ...\n    }\n}", 
            "title": "View"
        }, 
        {
            "location": "/spork-android/examples/view/#view", 
            "text": "", 
            "title": "View"
        }, 
        {
            "location": "/spork-android/examples/view/#introduction", 
            "text": "When creating a custom view, it's best to extend a  FrameLayout , because  @BindLayout  will inflate the specified layout into it.  The following annotations are supported:   @BindClick  @BindView  @BindLayout  @BindResource  @Inject", 
            "title": "Introduction"
        }, 
        {
            "location": "/spork-android/examples/view/#example", 
            "text": "@BindLayout(R.layout.view_layout_binding)\npublic class MyView extends FrameLayout {\n\n    @BindView(R.id.textview)\n    private TextView textView;\n\n    public MyView(Context context) {\n        super(context);\n        // Note: Spork.bind() must be called in \n        // all constructors that are implemented!\n        Spork.bind(this);\n    }\n\n    @BindClick(R.id.button_one)\n    private void onClickDownload() {\n        // ...\n    }\n\n    // BindClick can also pass the button that was clicked\n    @BindClick(R.id.button_two)\n    private void onClickOtherButton(Button otherButton) {\n        // ...\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/spork-android/proguard/", 
            "text": "ProGuard \n DexGuard\n\n\nProGuard's shrinking process might remove your components, because they are instantiated by reflection instead of the regular way. To avoid this, you need to specify the classes and interfaces to keep in your proguard configuration.\n\n\nThis includes:\n\n\n\n\nAny injected dependencies with \n@Inject\n\n\nModules\n\n\n\n\nSpork itself already includes a ProGuard file that keeps all Spork-related classes.\nSpork is very lightweight, so the impact on your method and field count will be very limited.\n\n\nExample\n\n\nYou can ensure that your classes and interfaces are kept as follows:\n\n\n-keep class com.yourapp.modules.** { *; }\n-keep interface com.yourapp.interfaces.** { *; }", 
            "title": "ProGuard"
        }, 
        {
            "location": "/spork-android/proguard/#proguard-dexguard", 
            "text": "ProGuard's shrinking process might remove your components, because they are instantiated by reflection instead of the regular way. To avoid this, you need to specify the classes and interfaces to keep in your proguard configuration.  This includes:   Any injected dependencies with  @Inject  Modules   Spork itself already includes a ProGuard file that keeps all Spork-related classes.\nSpork is very lightweight, so the impact on your method and field count will be very limited.", 
            "title": "ProGuard &amp; DexGuard"
        }, 
        {
            "location": "/spork-android/proguard/#example", 
            "text": "You can ensure that your classes and interfaces are kept as follows:  -keep class com.yourapp.modules.** { *; }\n-keep interface com.yourapp.interfaces.** { *; }", 
            "title": "Example"
        }
    ]
}