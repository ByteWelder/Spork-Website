{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nSpork is an annotation processing library to speed up development on your projects.\n\nThis allows you to write less boilerplate code to make code more readable and maintainable.\n\n\nThis library is \nfast\n, \nopen-source\n and it aims to be different by overcoming the shortcomings of its \nalternatives\n.\n\n\nExample\n\n\n@BindLayout(R.layout.activity_download)\npublic class DownloadActivity extends Activity {\n\n    @BindView(R.id.download_button)\n    private Button downloadButton;\n\n    @BindFragment(R.id.details_fragment)\n    private DetailsFragment fragment;\n\n    @BindComponent\n    private DownloadManager downloadManager;\n\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Spork.bind(this); // Spork does its magic\n    }\n\n    @BindClick(R.id.other_button)\n    private void onClickButton(Button button) {\n        downloadManager.startDownload();\n    }\n}\n\n@ComponentScope(scope = ComponentScope.Scope.SINGLETON)\npublic class DownloadManager {\n    public void startDownload() { ... }\n}\n\n\n\n\nGetting started\n\n\nAdd the following dependencies in \nbuild.gradle\n:\n\n\ndependencies {\n    compile 'io.github.sporklibrary:spork:3.2.0'\n    compile 'io.github.sporklibrary:spork-android:3.0.0@aar'\n\n    // The following dependency is optional.\n    // It requires you to also add: appcompat-v7, support-v4, recyclerview-v7\n    compile 'io.github.sporklibrary:spork-android-support:3.0.0@aar' \n}\n\n\n\n\nAll dependencies are available at \nMaven Central Repository\n.\n\n\nUpgrading from 2.x to 3.x:\n\n\n\n\nSpork Android has changed its files from \nio.github.sporklibrary\n to \nio.github.sporklibrary.android\n\n\nThere are separate dependencies for the Android support/compat libraries as defined above.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#introduction", 
            "text": "Spork is an annotation processing library to speed up development on your projects. \nThis allows you to write less boilerplate code to make code more readable and maintainable.  This library is  fast ,  open-source  and it aims to be different by overcoming the shortcomings of its  alternatives .", 
            "title": "Introduction"
        }, 
        {
            "location": "/#example", 
            "text": "@BindLayout(R.layout.activity_download)\npublic class DownloadActivity extends Activity {\n\n    @BindView(R.id.download_button)\n    private Button downloadButton;\n\n    @BindFragment(R.id.details_fragment)\n    private DetailsFragment fragment;\n\n    @BindComponent\n    private DownloadManager downloadManager;\n\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Spork.bind(this); // Spork does its magic\n    }\n\n    @BindClick(R.id.other_button)\n    private void onClickButton(Button button) {\n        downloadManager.startDownload();\n    }\n}\n\n@ComponentScope(scope = ComponentScope.Scope.SINGLETON)\npublic class DownloadManager {\n    public void startDownload() { ... }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Add the following dependencies in  build.gradle :  dependencies {\n    compile 'io.github.sporklibrary:spork:3.2.0'\n    compile 'io.github.sporklibrary:spork-android:3.0.0@aar'\n\n    // The following dependency is optional.\n    // It requires you to also add: appcompat-v7, support-v4, recyclerview-v7\n    compile 'io.github.sporklibrary:spork-android-support:3.0.0@aar' \n}  All dependencies are available at  Maven Central Repository .", 
            "title": "Getting started"
        }, 
        {
            "location": "/#upgrading-from-2x-to-3x", 
            "text": "Spork Android has changed its files from  io.github.sporklibrary  to  io.github.sporklibrary.android  There are separate dependencies for the Android support/compat libraries as defined above.", 
            "title": "Upgrading from 2.x to 3.x:"
        }, 
        {
            "location": "/documentation/", 
            "text": "Documentation\n\n\nVersion 4.0 Preview\n\n\nVersion 3.x", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#version-40-preview", 
            "text": "", 
            "title": "Version 4.0 Preview"
        }, 
        {
            "location": "/documentation/#version-3x", 
            "text": "", 
            "title": "Version 3.x"
        }, 
        {
            "location": "/about/benchmarks/", 
            "text": "Benchmarks\n\n\nLast updated on September 5, 2016 with Spork version 3.x\n\n\nSetup\n\n\nThe test results below are output from the open source \nSpork Benchmark\n applications.\n\n\nTo test performance, I created 2 new annotations with their own annotation binder: \n@BindTest1\n and \n@BindTest2\n. Binding the annotation to an object increases a global static counter and does nothing else. This is to ensure that we are only measuring Spork performance and not any additional behaviors.\n\n\nBoth annotations and annotation binders are in effect the same. This is to see potential differences in caching levels (JVM cache versus different types of internal caching).\n\n\nThe type that we bind in the test has 5 fields that each have been marked with the annotation. It looks something like this:\n\n\npublic class TestObject {\n    @BindTest1 Object a;\n    @BindTest1 Object b;\n    @BindTest1 Object c;\n    @BindTest1 Object d;\n    @BindTest1 Object e;\n\n    public void bind() {\n        Spork.bind(this);\n    }\n}\n\n\n\n\nThere are several benchmarks and all benchmarks are ran \n10\n times:\n\n\n\n\nBind 1 object instance with \n@BindTest1\n fields\n\n\nBind 1 object instance with \n@BindTest2\n fields\n\n\nBind 1000 objects instances with \n@BindTest1\n fields\n\n\nBind 1000 objects instances with \n@BindTest2\n fields\n\n\n\n\nRaw results\n\n\n\n\nNexus 5X with Android 7.0\n\n\nNexus 4 with Android 5.1.1\n (made in 2012)\n\n\nHTC One X with Android 4.2.2\n (made in 2012)\n\n\nMac Mini Mid 2011 @ 2.3GHz i5\n (made in 2011)\n\n\n\n\nConclusion\n\n\nReflection is really fast on Android.  It generally takes only several microseconds (not even milliseconds!) on \nNexus 4\n to bind an object.\n\n\nThe very first binding (of any type on any instance) is a bit slower due to cache creation and/or cache warming. This will take on average less than \n10 ms\n on 4 year old hardware and I think this is very acceptable. The fastest cold cache binding time was \n3 ms\n on a \nNexus 4\n and \n1.354 ms\n on a \nNexus 5X\n.\n\n\nAverages\n\n\nBinding on object took on average about:\n\n\n\n\n0.0003 ms\n on the \nNexus 5X\n with \nAndroid 7.0\n\n\n0.002 ms\n on the \nNexus 4\n with \nAndroid 5.1.1\n\n\n0.05 ms\n on the \nHTC One X\n with \nAndroid 4.2.2\n\n\n\n\nFirst bind speed\n\n\nThe very first bind throughout a benchmarking session always takes a bit longer. This is due to cold cache in Spork.\n\n\nThe first instance bind took:\n\n\n\n\n1.3 ms\n to \n2.7 ms\n on the \nNexus 5X\n with \nAndroid 7.0\n\n\n3 ms\n to \n12 ms\n on the \nNexus 4\n with \nAndroid 5.1.1\n\n\n5 ms\n to \n12 ms\n on the \nHTC One X\n with \nAndroid 4.2.2", 
            "title": "Benchmarks"
        }, 
        {
            "location": "/about/benchmarks/#benchmarks", 
            "text": "Last updated on September 5, 2016 with Spork version 3.x", 
            "title": "Benchmarks"
        }, 
        {
            "location": "/about/benchmarks/#setup", 
            "text": "The test results below are output from the open source  Spork Benchmark  applications.  To test performance, I created 2 new annotations with their own annotation binder:  @BindTest1  and  @BindTest2 . Binding the annotation to an object increases a global static counter and does nothing else. This is to ensure that we are only measuring Spork performance and not any additional behaviors.  Both annotations and annotation binders are in effect the same. This is to see potential differences in caching levels (JVM cache versus different types of internal caching).  The type that we bind in the test has 5 fields that each have been marked with the annotation. It looks something like this:  public class TestObject {\n    @BindTest1 Object a;\n    @BindTest1 Object b;\n    @BindTest1 Object c;\n    @BindTest1 Object d;\n    @BindTest1 Object e;\n\n    public void bind() {\n        Spork.bind(this);\n    }\n}  There are several benchmarks and all benchmarks are ran  10  times:   Bind 1 object instance with  @BindTest1  fields  Bind 1 object instance with  @BindTest2  fields  Bind 1000 objects instances with  @BindTest1  fields  Bind 1000 objects instances with  @BindTest2  fields", 
            "title": "Setup"
        }, 
        {
            "location": "/about/benchmarks/#raw-results", 
            "text": "Nexus 5X with Android 7.0  Nexus 4 with Android 5.1.1  (made in 2012)  HTC One X with Android 4.2.2  (made in 2012)  Mac Mini Mid 2011 @ 2.3GHz i5  (made in 2011)", 
            "title": "Raw results"
        }, 
        {
            "location": "/about/benchmarks/#conclusion", 
            "text": "Reflection is really fast on Android.  It generally takes only several microseconds (not even milliseconds!) on  Nexus 4  to bind an object.  The very first binding (of any type on any instance) is a bit slower due to cache creation and/or cache warming. This will take on average less than  10 ms  on 4 year old hardware and I think this is very acceptable. The fastest cold cache binding time was  3 ms  on a  Nexus 4  and  1.354 ms  on a  Nexus 5X .", 
            "title": "Conclusion"
        }, 
        {
            "location": "/about/benchmarks/#averages", 
            "text": "Binding on object took on average about:   0.0003 ms  on the  Nexus 5X  with  Android 7.0  0.002 ms  on the  Nexus 4  with  Android 5.1.1  0.05 ms  on the  HTC One X  with  Android 4.2.2", 
            "title": "Averages"
        }, 
        {
            "location": "/about/benchmarks/#first-bind-speed", 
            "text": "The very first bind throughout a benchmarking session always takes a bit longer. This is due to cold cache in Spork.  The first instance bind took:   1.3 ms  to  2.7 ms  on the  Nexus 5X  with  Android 7.0  3 ms  to  12 ms  on the  Nexus 4  with  Android 5.1.1  5 ms  to  12 ms  on the  HTC One X  with  Android 4.2.2", 
            "title": "First bind speed"
        }, 
        {
            "location": "/about/comparison/", 
            "text": "Comparison\n\n\n\n\n\n\n\n\n\n\nSpork\n\n\nAndroid Annotations\n\n\nButter Knife\n\n\nDagger\n\n\nRoboGuice\n\n\n\n\n\n\n\n\n\n\nNo code generation\n (1)\n\n\nv\n\n\nx\n\n\nx\n\n\nx\n\n\nx\n\n\n\n\n\n\nAdvanced Android support\n (2)\n\n\nv\n\n\nv\n\n\nv\n\n\nx\n\n\nv\n\n\n\n\n\n\nInheritance-safe\n (3)\n\n\nv\n\n\nx\n\n\nv\n\n\nv\n\n\nx\n\n\n\n\n\n\nPOJO injection\n\n\nv\n\n\nv\n\n\nx\n\n\nv\n\n\nv\n\n\n\n\n\n\nPOJO stubbing\n (4)\n\n\nv\n\n\nx\n\n\nx\n\n\nv\n\n\nx\n\n\n\n\n\n\nEasily extensible\n (5)\n\n\nv\n\n\nx\n\n\nx\n\n\nx\n\n\nx\n\n\n\n\n\n\nSmall library\n (6)\n\n\nv\n\n\nx\n\n\nv\n\n\nv\n\n\nx\n\n\n\n\n\n\n\n\n(1) No code generation\n\n\nLibraries that generate code are less predictable at runtime, increase build times and in some cases are more difficult to debug (because you might need to debug the generated code).\n\n\n(2) Advanced Android support\n\n\nHas advanced support for Android for binding Views, Fragments, Clicks and more.\n\n\n(3) Inheritance-safe:\n\n\nSome libraries require you to inherit special classes before its functionality can work. For example \nRoboActivity\n with RoboGuice. Forcing to use a custom base class is considered bad practice.\n\n\n(4) Mocking/stubbing support:\n\n\nIntegrated features for stubbing POJO injections.\n\n\n(5) Easily extensible:\n\n\nCreate new functionality without having to re-build the library.\n\n\n(6) Based on method count and dex:\n\n\n\n\nSpork: 262 methods, 45kB dex (verify \nhere\n)\n\n\nAndroid Annotations: (excluding generated code!) 6029 methods, 741kB dex (verify \nhere\n)\n\n\nButter Knife: (excluding generated code!) 196 methods, 37kB dex (verify \nhere\n)\n\n\nDagger: (excluding generated code!) 117 methods, 20kB dex (verify \nhere\n)\n\n\nRoboGuice: 10280 methods, 1344kB dex (verify \nhere\n)\n\n\n\n\nIn reality, Spork will very likely be the smallest one, because no code is generated.", 
            "title": "Comparison"
        }, 
        {
            "location": "/about/comparison/#comparison", 
            "text": "Spork  Android Annotations  Butter Knife  Dagger  RoboGuice      No code generation  (1)  v  x  x  x  x    Advanced Android support  (2)  v  v  v  x  v    Inheritance-safe  (3)  v  x  v  v  x    POJO injection  v  v  x  v  v    POJO stubbing  (4)  v  x  x  v  x    Easily extensible  (5)  v  x  x  x  x    Small library  (6)  v  x  v  v  x     (1) No code generation  Libraries that generate code are less predictable at runtime, increase build times and in some cases are more difficult to debug (because you might need to debug the generated code).  (2) Advanced Android support  Has advanced support for Android for binding Views, Fragments, Clicks and more.  (3) Inheritance-safe:  Some libraries require you to inherit special classes before its functionality can work. For example  RoboActivity  with RoboGuice. Forcing to use a custom base class is considered bad practice.  (4) Mocking/stubbing support:  Integrated features for stubbing POJO injections.  (5) Easily extensible:  Create new functionality without having to re-build the library.  (6) Based on method count and dex:   Spork: 262 methods, 45kB dex (verify  here )  Android Annotations: (excluding generated code!) 6029 methods, 741kB dex (verify  here )  Butter Knife: (excluding generated code!) 196 methods, 37kB dex (verify  here )  Dagger: (excluding generated code!) 117 methods, 20kB dex (verify  here )  RoboGuice: 10280 methods, 1344kB dex (verify  here )   In reality, Spork will very likely be the smallest one, because no code is generated.", 
            "title": "Comparison"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\n\nAll Spork libraries are licensed with \nApache License version 2.0\n.\n\n\nApache License version 2.0\n\n\nApache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \nLicense\n shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \nLicensor\n shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \nLegal Entity\n shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \ncontrol\n means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \nSource\n form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \nObject\n form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \nWork\n shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \nDerivative Works\n shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \nContribution\n shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \nsubmitted\n\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \nNot a Contribution.\n\n\n      \nContributor\n shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \nNOTICE\n text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \nAS IS\n BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \n{}\n\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \nprinted page\n as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \nLicense\n);\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#license", 
            "text": "All Spork libraries are licensed with  Apache License version 2.0 .", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#apache-license-version-20", 
            "text": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n       License  shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n       Licensor  shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n       Legal Entity  shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n       control  means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n       You  (or  Your ) shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n       Source  form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n       Object  form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n       Work  shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n       Derivative Works  shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n       Contribution  shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition,  submitted \n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as  Not a Contribution. \n\n       Contributor  shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a  NOTICE  text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an  AS IS  BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets  {} \n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same  printed page  as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the  License );\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an  AS IS  BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.", 
            "title": "Apache License version 2.0"
        }, 
        {
            "location": "/about/release-notes/", 
            "text": "Release Notes\n\n\n4.0.0\n\n\n\n\nall package versions are from now on bumped to the same version when a release is done\n\n\nmost packages are moved (and created \n.internal\n package)\n\n\nSpork\n/\nSporkAndroid\n/\nSporkAndroidSupport\n can now be instantiated (but a shared instance is available for Spork itself which suits most scenarios)\n\n\n@ComponentScope(Scope.SINGLETON)\n is now \n@Singleton\n\n\nspork-android\n library now uses \nsupport-fragment\n dependency instead of \nsupport-v4\n and \nappcompat-v7\n\n\ncreated \nViewProvider\n to annotate POJO classes so they can work with \n@BindView\n\n\nremoved custom support for \nRecyclerView.ViewHolder\n as you can now make it implement \nViewProvider\n\n\nBindResourceBinder\n now uses newer Android API when possible\n\n\ncaching is now flattened (removed custom models that held a separate layer of caching)\n\n\ncaching uses less memory (\nArrayList.trimToSize()\n where applicable)\n\n\nspork\n and \nspork-android\n now have an extension system to automatically load known dependencies: this is simpler (more reliable) and quicker\n\n\nupdated to use new Android build tools\n\n\nimproved tests and also started using Mockito\n\n\nFieldBinder\n, \nMethodBinder\n and \nTypeBinder\n are now more simplified\n\n\nremoved logback from tests (because it wasn't being used)\n\n\nconverted spaces into tabs where necessary\n\n\nimplemented \n@Inject\n, \n@Nullable\n, \n@NonNull\n and \n@Lazy\n annotations\n\n\n@BindComponent\n and \n@ComponentScope\n are removed\n\n\nadded jacoco for code coverage\n\n\nadded dexcount plugin for \nspork-android\n and \nspork-android-support\n\n\n\n\nOld Release Notes\n\n\nspork 3.2.0\n\n\n\n\nnew Spork Android init code\n\n\n\n\nspork 3.1.0\n\n\n\n\nremoved logging dependency (slf4j)\n\n\n\n\nspork 3.0.0\n\n\n\n\nrefactored annotation binding internals including a new and more effective caching mechanism\n\n\njavadoc improvements\n\n\n\n\nspork 2.6.0\n\n\n\n\nautomatically register Spork Android bindings\n\n\njavadoc improvements\n\n\n\n\nspork 2.5.0\n\n\n\n\nimplemented support for binding with inheritance\n\n\n\n\nspork 2.4.1\n\n\n\n\njavadoc improvements\n\n\n\n\nspork 2.4.0\n\n\n\n\nBindComponent\n annotation now uses \nvalue()\n instead of \nimplementation()\n\n\nimplemented support for custom component factories to do mocking/stubbing\n\n\n\n\nspork 2.3.0\n\n\n\n\ndisabled recursive component binding\n\n\n\n\nspork 2.2.0\n\n\n\n\nfix for pre-JDK1.8 issue when binding components\n\n\n\n\nspork 2.1.0\n\n\n\n\nmoved some classes into new namespaces\n\n\ncreated \nComponentParent\n annotation\n\n\n\n\nspork 2.0.0\n\n\n\n\nadded support for type binding\n\n\njavadoc improvements\n\n\n\n\nspork-android 3.0.0\n\n\n\n\nupdated Spork core to 3.0.0\n\n\nsplit up into \nspork-android\n and \nspork-android-support\n\n\nintroduced new package name \nio.github.sporklibrary.android\n\n\n\n\nspork-android 2.4.2\n\n\n\n\nadded ProGuard file\n\n\n\n\nspork-android 2.4.1\n\n\n\n\nimplemented a better way to check for optional dependencies\n\n\n\n\nspork-android 2.4.0\n\n\n\n\nupgraded to Spork core 3.0.0\n\n\njavadoc improvements\n\n\n\n\nspork-android 2.3.0\n\n\n\n\nSporkAndroid.initialize()\n is now deprecated and doesn't have to be called anymore\n\n\nadded support for \nandroid.support.v7.widget.RecyclerView\n binding\n\n\nadded support for \nio.github.sporklibrary.interfaces.ContextProvider\n interface\n\n\nupdated support libraries\n\n\ngradle-wrapper upgraded to 2.10\n\n\ncode corectness changes\n\n\njavadoc improvements\n\n\n\n\nspork-android 2.2.2\n\n\n\n\nbetter test coverage\n\n\n\n\nspork-android 2.2.1\n\n\n\n\nupgraded to Spork core 2.5.0\n\n\n\n\nspork-android 2.2.0\n\n\n\n\nupgraded build tools to 23.0.2\n\n\nupgraded to Spork 2.4.0\n\n\n\n\nspork-android 2.1.0\n\n\n\n\nupgraded to Spork 2.3.0\n\n\nregister BindLayoutBinder first (because other binders depend on it)\n\n\njavadoc improvements\n\n\n\n\nspork-android 2.0.0\n\n\n\n\nadded support for AppCompatActivity and support Fragments (support-v4, appcompat-v7)\n\n\nupgraded to spork 2.2.0 to fix issue with components in relation to JDK 1.8 features\n\n\n\n\nOlderer release notes\n\n\nOlder version history is not available. Please check the \ngit commit history\n.", 
            "title": "Release Notes"
        }, 
        {
            "location": "/about/release-notes/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/about/release-notes/#400", 
            "text": "all package versions are from now on bumped to the same version when a release is done  most packages are moved (and created  .internal  package)  Spork / SporkAndroid / SporkAndroidSupport  can now be instantiated (but a shared instance is available for Spork itself which suits most scenarios)  @ComponentScope(Scope.SINGLETON)  is now  @Singleton  spork-android  library now uses  support-fragment  dependency instead of  support-v4  and  appcompat-v7  created  ViewProvider  to annotate POJO classes so they can work with  @BindView  removed custom support for  RecyclerView.ViewHolder  as you can now make it implement  ViewProvider  BindResourceBinder  now uses newer Android API when possible  caching is now flattened (removed custom models that held a separate layer of caching)  caching uses less memory ( ArrayList.trimToSize()  where applicable)  spork  and  spork-android  now have an extension system to automatically load known dependencies: this is simpler (more reliable) and quicker  updated to use new Android build tools  improved tests and also started using Mockito  FieldBinder ,  MethodBinder  and  TypeBinder  are now more simplified  removed logback from tests (because it wasn't being used)  converted spaces into tabs where necessary  implemented  @Inject ,  @Nullable ,  @NonNull  and  @Lazy  annotations  @BindComponent  and  @ComponentScope  are removed  added jacoco for code coverage  added dexcount plugin for  spork-android  and  spork-android-support", 
            "title": "4.0.0"
        }, 
        {
            "location": "/about/release-notes/#old-release-notes", 
            "text": "", 
            "title": "Old Release Notes"
        }, 
        {
            "location": "/about/release-notes/#spork-320", 
            "text": "new Spork Android init code", 
            "title": "spork 3.2.0"
        }, 
        {
            "location": "/about/release-notes/#spork-310", 
            "text": "removed logging dependency (slf4j)", 
            "title": "spork 3.1.0"
        }, 
        {
            "location": "/about/release-notes/#spork-300", 
            "text": "refactored annotation binding internals including a new and more effective caching mechanism  javadoc improvements", 
            "title": "spork 3.0.0"
        }, 
        {
            "location": "/about/release-notes/#spork-260", 
            "text": "automatically register Spork Android bindings  javadoc improvements", 
            "title": "spork 2.6.0"
        }, 
        {
            "location": "/about/release-notes/#spork-250", 
            "text": "implemented support for binding with inheritance", 
            "title": "spork 2.5.0"
        }, 
        {
            "location": "/about/release-notes/#spork-241", 
            "text": "javadoc improvements", 
            "title": "spork 2.4.1"
        }, 
        {
            "location": "/about/release-notes/#spork-240", 
            "text": "BindComponent  annotation now uses  value()  instead of  implementation()  implemented support for custom component factories to do mocking/stubbing", 
            "title": "spork 2.4.0"
        }, 
        {
            "location": "/about/release-notes/#spork-230", 
            "text": "disabled recursive component binding", 
            "title": "spork 2.3.0"
        }, 
        {
            "location": "/about/release-notes/#spork-220", 
            "text": "fix for pre-JDK1.8 issue when binding components", 
            "title": "spork 2.2.0"
        }, 
        {
            "location": "/about/release-notes/#spork-210", 
            "text": "moved some classes into new namespaces  created  ComponentParent  annotation", 
            "title": "spork 2.1.0"
        }, 
        {
            "location": "/about/release-notes/#spork-200", 
            "text": "added support for type binding  javadoc improvements", 
            "title": "spork 2.0.0"
        }, 
        {
            "location": "/about/release-notes/#spork-android-300", 
            "text": "updated Spork core to 3.0.0  split up into  spork-android  and  spork-android-support  introduced new package name  io.github.sporklibrary.android", 
            "title": "spork-android 3.0.0"
        }, 
        {
            "location": "/about/release-notes/#spork-android-242", 
            "text": "added ProGuard file", 
            "title": "spork-android 2.4.2"
        }, 
        {
            "location": "/about/release-notes/#spork-android-241", 
            "text": "implemented a better way to check for optional dependencies", 
            "title": "spork-android 2.4.1"
        }, 
        {
            "location": "/about/release-notes/#spork-android-240", 
            "text": "upgraded to Spork core 3.0.0  javadoc improvements", 
            "title": "spork-android 2.4.0"
        }, 
        {
            "location": "/about/release-notes/#spork-android-230", 
            "text": "SporkAndroid.initialize()  is now deprecated and doesn't have to be called anymore  added support for  android.support.v7.widget.RecyclerView  binding  added support for  io.github.sporklibrary.interfaces.ContextProvider  interface  updated support libraries  gradle-wrapper upgraded to 2.10  code corectness changes  javadoc improvements", 
            "title": "spork-android 2.3.0"
        }, 
        {
            "location": "/about/release-notes/#spork-android-222", 
            "text": "better test coverage", 
            "title": "spork-android 2.2.2"
        }, 
        {
            "location": "/about/release-notes/#spork-android-221", 
            "text": "upgraded to Spork core 2.5.0", 
            "title": "spork-android 2.2.1"
        }, 
        {
            "location": "/about/release-notes/#spork-android-220", 
            "text": "upgraded build tools to 23.0.2  upgraded to Spork 2.4.0", 
            "title": "spork-android 2.2.0"
        }, 
        {
            "location": "/about/release-notes/#spork-android-210", 
            "text": "upgraded to Spork 2.3.0  register BindLayoutBinder first (because other binders depend on it)  javadoc improvements", 
            "title": "spork-android 2.1.0"
        }, 
        {
            "location": "/about/release-notes/#spork-android-200", 
            "text": "added support for AppCompatActivity and support Fragments (support-v4, appcompat-v7)  upgraded to spork 2.2.0 to fix issue with components in relation to JDK 1.8 features", 
            "title": "spork-android 2.0.0"
        }, 
        {
            "location": "/about/release-notes/#olderer-release-notes", 
            "text": "Older version history is not available. Please check the  git commit history .", 
            "title": "Olderer release notes"
        }
    ]
}